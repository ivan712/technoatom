ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    how to make sure my connected axis doesn&#x27;t fall apart?
                

            
            
                
                    what are principles of vector crt display? simplest way to drive crts?
                

            
            
                
                    is there such a thing as a programmable power sink?
                

            
            
                
                    reading a swiss newspaper as a german learner
                

            
            
                
                    how can i say ;a period of four months; in one word?
                

            
            
                
                    will reading the same book in two languages confuse my daughter?
                

            
            
                
                    r: problem with runif: generated number repeats (more often than expected) after less than 100 000 steps
                

            
            
                
                    access parent record from child soql - apex
                

            
            
                
                    is troll mitosis possible?
                

            
            
                
                    unexpectedly difficult matchstick problem
                

            
            
                
                    how to ask for employment terms in writing without coming across as not trusting?
                

            
            
                
                    why don&#x27;t ailerons affect pitch?
                

            
            
                
                    are heat shields just as necessary on launch as re-entry?
                

            
            
                
                    \csdef{} that reports error if command is already defined
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    has any country&#x27;s government concluded they need more decentralization to fight covid-19 or future pandemics?
                

            
            
                
                    why does moving the centre of gravity forward increase stability of a plane?
                

            
            
                
                    android manifest file weird location tags
                

            
            
                
                    how can i ;reload; a buffer that was previously unloaded using `:bd`, such that it will re-appear in `:ls`?
                

            
            
                
                    am i aware of the location of my mage hand, which i can&#x27;t see, if it is obstructed as i move it?
                

            
            
                
                    parse ascii art math!
                

            
            
                
                    diodes for sailboat lighting circuit?
                

            
            
                
                    anyone know what programming language this is?
                

            
            
                
                    how rigorous should high school calculus be?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    looking for comic about female superhero who loses her powers
                

            
            
                
                    why are portuguese migrating out of portugal?
                

            
            
                
                    how can i say ;a period of four months; in one word?
                

            
            
                
                    is there such a thing as a programmable power sink?
                

            
            
                
                    why don&#x27;t ailerons affect pitch?
                

            
            
                
                    how can i make gurps less intimidating for my friends?
                

            
            
                
                    character array initialization with the first element being null
                

            
            
                
                    how to make sure my connected axis doesn&#x27;t fall apart?
                

            
            
                
                    does the mage hand cantrip pass through solid surfaces?
                

            
            
                
                    encapsulation: can a higher protocol encapsulate a lower protocol?
                

            
            
                
                    repackaging shelf-stable products
                

            
            
                
                    will reading the same book in two languages confuse my daughter?
                

            
            
                
                    why does a server cpu perform faster tasks than a macbook pro cpu with the same benchmark score?
                

            
            
                
                    can i type this with my left hand?
                

            
            
                
                    need to keep re-soldering smd resistors on pcb
                

            
            
                
                    trying to find a novel that pits an ancient greek scientist against a chinese one
                

            
            
                
                    resource constrained multi-project scheduling problem and resource allocation
                

            
            
                
                    why is electric flux through a cube the same as electric flux through a spherical shell?
                

            
            
                
                    how can a neutron have the same mass as a proton &#x2b; electron, and a proton have the same mass as a neutron &#x2b; positron?
                

            
            
                
                    outdoor spotlight stuck on without a switch
                

            
            
                
                    on ubuntu, can i see if www site looks good on mobile browser?
                

            
            
                
                    how to test if my application method handles http status 404 of a rest api without actually calling that rest api
                

            
            
                
                    in the two-person killing the hydra game, what is the winning strategy?
                

            
            
                
                    parse ascii art math!
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    access parent record from child soql - apex
                

            
            
                
                    is troll mitosis possible?
                

            
            
                
                    reading a swiss newspaper as a german learner
                

            
            
                
                    is it possible to lock layer order in layer browser panel in qgis?
                

            
            
                
                    encapsulation: can a higher protocol encapsulate a lower protocol?
                

            
            
                
                    where to place attribution details for emojis in blog posts (cc by 4.0)?
                

            
            
                
                    is it possible to connect an old rj11 phone line into a cat 6 wall socket to use for fttn service?
                

            
            
                
                    did i anger my pi by not sending my data/notes after leaving their lab?
                

            
            
                
                    breath marks and ritardando with no notes
                

            
            
                
                    why is electric flux through a cube the same as electric flux through a spherical shell?
                

            
            
                
                    is a modern dark age possible?
                

            
            
                
                    how can i say ;a period of four months; in one word?
                

            
            
                
                    how can twinaxial cables be faster than cat cables
                

            
            
                
                    trying to find a novel that pits an ancient greek scientist against a chinese one
                

            
            
                
                    why buddha put so much emphasis on no-self?
                

            
            
                
                    why does stockfish undervalue pawns when compared to the classical ;a piece is worth three pawns; approach?
                

            
            
                
                    what are principles of vector crt display? simplest way to drive crts?
                

            
            
                
                    is elon musk&#x27;s child name valid in california?
                

            
            
                
                    sql server spill level 0 - what is it?
                

            
            
                
                    repackaging shelf-stable products
                

            
            
                
                    how rigorous should high school calculus be?
                

            
            
                
                    what is the variance of y = ax where a is a matrix?
                

            
            
                
                    what&#x27;s it like to be an uploaded human with limited computing power?
                

            
            
                
                    variance attribution calculation from a covariance matrix
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    analogy between stiefel-whitney and chern classes
                

            
            
                
                    what&#x27;s it like to be an uploaded human with limited computing power?
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    are the grounds and neutrals in this electrical subpanel reversed?
                

            
            
                
                    encapsulation: can a higher protocol encapsulate a lower protocol?
                

            
            
                
                    in the two-person killing the hydra game, what is the winning strategy?
                

            
            
                
                    what was the last move made in this chess game?
                

            
            
                
                    has any country&#x27;s government concluded they need more decentralization to fight covid-19 or future pandemics?
                

            
            
                
                    forty9 cryptarithm
                

            
            
                
                    how does password reset work if 2fa is enabled?
                

            
            
                
                    how can i ;reload; a buffer that was previously unloaded using `:bd`, such that it will re-appear in `:ls`?
                

            
            
                
                    how long did it take to remove or install an ssme on the space shuttle?
                

            
            
                
                    how to ask for employment terms in writing without coming across as not trusting?
                

            
            
                
                    what would days and nights look like on this cylindrical world?
                

            
            
                
                    why are portuguese migrating out of portugal?
                

            
            
                
                    is elon musk&#x27;s child name valid in california?
                

            
            
                
                    parse ascii art math!
                

            
            
                
                    is troll mitosis possible?
                

            
            
                
                    why is electric flux through a cube the same as electric flux through a spherical shell?
                

            
            
                
                    why don&#x27;t ailerons affect pitch?
                

            
            
                
                    will reading the same book in two languages confuse my daughter?
                

            
            
                
                    how does chrome decide what to highlight when you double-click japanese text?
                

            
            
                
                    style by categories for items with no value in qgis
                

            
            
                
                    significant effect with overlapping boxplots?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    on ubuntu, can i see if www site looks good on mobile browser?
                

            
            
                
                    why are some listed companies so ;cheap; in the market? what would happen if i use my money to buy 100% of its shares?
                

            
            
                
                    is troll mitosis possible?
                

            
            
                
                    what does it mean to ;unmoor criticism;?
                

            
            
                
                    is jupiter a failed star?
                

            
            
                
                    how does elo rating scale with games played?
                

            
            
                
                    breath marks and ritardando with no notes
                

            
            
                
                    analogy between stiefel-whitney and chern classes
                

            
            
                
                    what is the benefit of a pasta pot with an inset?
                

            
            
                
                    has any country&#x27;s government concluded they need more decentralization to fight covid-19 or future pandemics?
                

            
            
                
                    reading a swiss newspaper as a german learner
                

            
            
                
                    why buddha put so much emphasis on no-self?
                

            
            
                
                    estimating when my project will be done
                

            
            
                
                    conversion into hexadecimal using c&#x2b;&#x2b;
                

            
            
                
                    how does password reset work if 2fa is enabled?
                

            
            
                
                    where to place attribution details for emojis in blog posts (cc by 4.0)?
                

            
            
                
                    is there such a thing as a programmable power sink?
                

            
            
                
                    do teachers want students to add their attempts on solving their own question in an email?
                

            
            
                
                    how do i become a regular contributor to github foss projects?
                

            
            
                
                    in the two-person killing the hydra game, what is the winning strategy?
                

            
            
                
                    how can twinaxial cables be faster than cat cables
                

            
            
                
                    access parent record from child soql - apex
                

            
            
                
                    what&#x27;s it like to be an uploaded human with limited computing power?
                

            
            
                
                    spread across a line (minus indent)
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    how does password reset work if 2fa is enabled?
                

            
            
                
                    what is the correct (most common) translation for &#x27;damas&#x27;?
                

            
            
                
                    how can twinaxial cables be faster than cat cables
                

            
            
                
                    why couldn&#x27;t japan crack the navajo code in ww2, when they captured a navajo native speaker?
                

            
            
                
                    estimating when my project will be done
                

            
            
                
                    how long did it take to remove or install an ssme on the space shuttle?
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    what does it mean to ;unmoor criticism;?
                

            
            
                
                    what is the benefit of a pasta pot with an inset?
                

            
            
                
                    how rigorous should high school calculus be?
                

            
            
                
                    did i anger my pi by not sending my data/notes after leaving their lab?
                

            
            
                
                    why does stockfish undervalue pawns when compared to the classical ;a piece is worth three pawns; approach?
                

            
            
                
                    does the mage hand cantrip pass through solid surfaces?
                

            
            
                
                    is there such a thing as a programmable power sink?
                

            
            
                
                    is a modern dark age possible?
                

            
            
                
                    style by categories for items with no value in qgis
                

            
            
                
                    car travel through france to spain - what restrictions are in place due to covid19?
                

            
            
                
                    are heat shields just as necessary on launch as re-entry?
                

            
            
                
                    how is octane rating defined for negative values and those over 100?
                

            
            
                
                    is it possible to lock layer order in layer browser panel in qgis?
                

            
            
                
                    is it unethical to expect one&#x27;s phd students to work after graduation without compensation? should graduates ask for compensation for work?
                

            
            
                
                    how does chrome decide what to highlight when you double-click japanese text?
                

            
            
                
                    why does moving the centre of gravity forward increase stability of a plane?
                

            
            
                
                    how can a neutron have the same mass as a proton &#x2b; electron, and a proton have the same mass as a neutron &#x2b; positron?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            





    

    
        visit chat
    
        



    


                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    how do i become a regular contributor to github foss projects?
                

            
            
                
                    estimating when my project will be done
                

            
            
                
                    in the two-person killing the hydra game, what is the winning strategy?
                

            
            
                
                    how to make sure my connected axis doesn&#x27;t fall apart?
                

            
            
                
                    how to ask for employment terms in writing without coming across as not trusting?
                

            
            
                
                    has any country&#x27;s government concluded they need more decentralization to fight covid-19 or future pandemics?
                

            
            
                
                    should cats eat ;huge; animals?
                

            
            
                
                    how does chrome decide what to highlight when you double-click japanese text?
                

            
            
                
                    parsing numbers and ranges from a string in javascript
                

            
            
                
                    is elon musk&#x27;s child name valid in california?
                

            
            
                
                    what&#x27;s it like to be an uploaded human with limited computing power?
                

            
            
                
                    why don&#x27;t ailerons affect pitch?
                

            
            
                
                    how to test if my application method handles http status 404 of a rest api without actually calling that rest api
                

            
            
                
                    sql server spill level 0 - what is it?
                

            
            
                
                    did the trump administration propose new cuts to the health budget in february 2020?
                

            
            
                
                    do teachers want students to add their attempts on solving their own question in an email?
                

            
            
                
                    why are some listed companies so ;cheap; in the market? what would happen if i use my money to buy 100% of its shares?
                

            
            
                
                    did i anger my pi by not sending my data/notes after leaving their lab?
                

            
            
                
                    \csdef{} that reports error if command is already defined
                

            
            
                
                    encapsulation: can a higher protocol encapsulate a lower protocol?
                

            
            
                
                    does the mage hand cantrip pass through solid surfaces?
                

            
            
                
                    spread across a line (minus indent)
                

            
            
                
                    r: problem with runif: generated number repeats (more often than expected) after less than 100 000 steps
                

            
            
                
                    are heat shields just as necessary on launch as re-entry?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    trying to find a novel that pits an ancient greek scientist against a chinese one
                

            
            
                
                    how to ask for employment terms in writing without coming across as not trusting?
                

            
            
                
                    repackaging shelf-stable products
                

            
            
                
                    content for a 40-minute lecture on graph theory for high schoolers
                

            
            
                
                    is it unethical to expect one&#x27;s phd students to work after graduation without compensation? should graduates ask for compensation for work?
                

            
            
                
                    did i anger my pi by not sending my data/notes after leaving their lab?
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    how can you tell if a note is major or minor?
                

            
            
                
                    bash script: fixed sleep time is adding up in while loop
                

            
            
                
                    should cats eat ;huge; animals?
                

            
            
                
                    is there an adjective meaning ;asking for too much in an arrogant way;?
                

            
            
                
                    why don&#x27;t ailerons affect pitch?
                

            
            
                
                    short squeeze basic questions
                

            
            
                
                    why does stockfish undervalue pawns when compared to the classical ;a piece is worth three pawns; approach?
                

            
            
                
                    what was the last move made in this chess game?
                

            
            
                
                    reading a swiss newspaper as a german learner
                

            
            
                
                    why is &#x523b; use to mean &#x27;&#x27;a quarter of an hour&#x27;&#x27;?
                

            
            
                
                    where to place attribution details for emojis in blog posts (cc by 4.0)?
                

            
            
                
                    how to apply barry harris 6th diminished voicings and maintain chord functions?
                

            
            
                
                    diodes for sailboat lighting circuit?
                

            
            
                
                    anyone know what programming language this is?
                

            
            
                
                    sql server spill level 0 - what is it?
                

            
            
                
                    style by categories for items with no value in qgis
                

            
            
                
                    is jupiter a failed star?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    is troll mitosis possible?
                

            
            
                
                    how to ask for employment terms in writing without coming across as not trusting?
                

            
            
                
                    how is octane rating defined for negative values and those over 100?
                

            
            
                
                    how do i become a regular contributor to github foss projects?
                

            
            
                
                    has any country&#x27;s government concluded they need more decentralization to fight covid-19 or future pandemics?
                

            
            
                
                    how does chrome decide what to highlight when you double-click japanese text?
                

            
            
                
                    car travel through france to spain - what restrictions are in place due to covid19?
                

            
            
                
                    how rigorous should high school calculus be?
                

            
            
                
                    is it unethical to expect one&#x27;s phd students to work after graduation without compensation? should graduates ask for compensation for work?
                

            
            
                
                    can language stay static with immortals?
                

            
            
                
                    r: problem with runif: generated number repeats (more often than expected) after less than 100 000 steps
                

            
            
                
                    should cats eat ;huge; animals?
                

            
            
                
                    what is the benefit of a pasta pot with an inset?
                

            
            
                
                    looking for comic about female superhero who loses her powers
                

            
            
                
                    is it possible to lock layer order in layer browser panel in qgis?
                

            
            
                
                    am i aware of the location of my mage hand, which i can&#x27;t see, if it is obstructed as i move it?
                

            
            
                
                    is it possible to connect an old rj11 phone line into a cat 6 wall socket to use for fttn service?
                

            
            
                
                    how can you tell if a note is major or minor?
                

            
            
                
                    resource constrained multi-project scheduling problem and resource allocation
                

            
            
                
                    access parent record from child soql - apex
                

            
            
                
                    estimating when my project will be done
                

            
            
                
                    on ubuntu, can i see if www site looks good on mobile browser?
                

            
            
                
                    breath marks and ritardando with no notes
                

            
            
                
                    why is &#x523b; use to mean &#x27;&#x27;a quarter of an hour&#x27;&#x27;?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            





    

    
        visit chat
    
        



    


                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    bash script: fixed sleep time is adding up in while loop
                

            
            
                
                    how can i secure a solo-authored paper as a phd student, while working with a supervisor who has reputation of forcing coauthorship?
                

            
            
                
                    are the grounds and neutrals in this electrical subpanel reversed?
                

            
            
                
                    how can i say ;a period of four months; in one word?
                

            
            
                
                    what is the benefit of a pasta pot with an inset?
                

            
            
                
                    how can a neutron have the same mass as a proton &#x2b; electron, and a proton have the same mass as a neutron &#x2b; positron?
                

            
            
                
                    where to place attribution details for emojis in blog posts (cc by 4.0)?
                

            
            
                
                    anyone know what programming language this is?
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    root of root of root of root
                

            
            
                
                    is it possible to lock layer order in layer browser panel in qgis?
                

            
            
                
                    is there such a thing as a programmable power sink?
                

            
            
                
                    is elon musk&#x27;s child name valid in california?
                

            
            
                
                    what are principles of vector crt display? simplest way to drive crts?
                

            
            
                
                    does the mage hand cantrip pass through solid surfaces?
                

            
            
                
                    how to apply barry harris 6th diminished voicings and maintain chord functions?
                

            
            
                
                    do teachers want students to add their attempts on solving their own question in an email?
                

            
            
                
                    why does moving the centre of gravity forward increase stability of a plane?
                

            
            
                
                    analogy between stiefel-whitney and chern classes
                

            
            
                
                    what&#x27;s it like to be an uploaded human with limited computing power?
                

            
            
                
                    why is &#x523b; use to mean &#x27;&#x27;a quarter of an hour&#x27;&#x27;?
                

            
            
                
                    breath marks and ritardando with no notes
                

            
            
                
                    what is the correct (most common) translation for &#x27;damas&#x27;?
                

            
            
                
                    reading a swiss newspaper as a german learner
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
ht://yandex.ru/
----------------------------------------
"incorrect adress"----------------------------------------
https://python-scripts.com/json
----------------------------------------







			
			
			
			
			
			
	
	json в python - примеры работы модуля json
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


































перейти к контенту






    
        

                            python 3
                        

        
        
            скачать python
скачать pycharm
форум
книги
контакты
        
		
                

            
                
                
            

        
            






    

	
	
	

	
		

			
			

	
				json в python		
		
	

    

	
	            
                    
    	
	
		сразу после появления, json быстро стал де факто стандартом обмена информации. вероятно вы здесь из-за того, что вы хотите переместить данные из одного места в другое. возможно вы получаете данные через api, или храните их в документной базе данных. так или иначе, вы заинтересовались json, и вам нужно пользоваться им через python.
содержание

подробнее про json
структура json
python поддерживает json
небольшой словарь
сериализация json
пример сериализации json python
несколько полезных аргументов
десериализация json
пример десериализации json python
пример работы с json python
кодирование и декодирование объектов python
упрощение структур данных
кодирование пользовательских типов
декодирование пользовательских типов
готово!

к счастью, это достаточно тривиальная задача, и как и с большинством тривиальных задач, python делает все до омерзения простым.
итак, используем ли мы json для хранения и обмена данными? именно так. это не более, чем стандартизированный формат, который используется сообществом для передачи данных. помните, что json не является единственным доступным форматом для такой работы, xml и yaml наверное, единственные альтернативные способы, которые стоит упомянуть.
подробнее про json
не удивительно, что javascript object notation был вдохновен подмножеством языка программирования javascript, связанным с синтаксисом объектного литерала. у них есть отличный сайт, в котором все прекрасно объясняется. не переживайте: json уже давно стал агностиком языка и существует как отдельный стандарт, по этому мы можем убрать javascript из этой дискуссии.








  
  > есть вопросы по python?
  на нашем форуме вы можете задать любой вопрос и получить ответ от всего нашего сообщества!
  
  открыть форум
  
  
  
    > чат и паблик программистов
    
    присоединяйтесь к нашему чату в телеграм и подпишитесь на наш паблик в вк.
    
    
    
    
      
      уникальный python канал в telegram
      
    
    
      
      вк паблик
      
    
    
    
  





в конечном счете, большая часть сообщества приняла json благодаря его простоте как для людей, так и для машин.
смотрите, это json!
структура json
готовьтесь. я собираюсь показать реальный пример json— такой же, какой вы встретите в реальной жизни. это нормально, подразумевается что json является читаемым для любого, кто пользовался с-языками, а python – это с-язык, так что мы говорим о вас!

		
		
			
			python
			
			
{
    "firstname": "jane",
    "lastname": "doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstname": "alice",
            "age": 6
        },
        {
            "firstname": "bob",
            "age": 8
        }
    ]
}
			
				
					
				
					12345678910111213141516
				
						{;;;;"firstname": "jane",;;;;"lastname": "doe",;;;;"hobbies": ["running", "sky diving", "singing"],;;;;"age": 35,;;;;"children": [;;;;;;;;{;;;;;;;;;;;;"firstname": "alice",;;;;;;;;;;;;"age": 6;;;;;;;;},;;;;;;;;{;;;;;;;;;;;;"firstname": "bob",;;;;;;;;;;;;"age": 8;;;;;;;;};;;;]}
					
				
			
		

как видите, json поддерживает примитивные типы, такие как строки python и числа, а также вложенные списки и объекты.
погодите, это выглядит как словарь python, верно? на данный момент это достаточно универсальная нотация объектов, и не думаю что uon может так же легко отскакивать от зубов. кстати, предлагайте альтернативы в комментариях!
ну что же, вы пережили первый контакт с диким json. теперь вам нужно научиться приручать его!
python поддерживает json
python содержит встроенный модуль под названием json для кодирования и декодирования данных json.
просто импортируйте модуль в начале вашего файла:

		
		
			
			python
			
			
import json
			
				
					
				
					1
				
						import json
					
				
			
		


небольшой словарь
как правило, процесс кодирования json называется сериализация. этот термин обозначает трансформацию данных в серию байтов (следовательно, серийных) для хранения или передачи по сети. также вы, возможно, уже слышали о термине «маршалинг», но это уже совсем другая область.
естественно, десериализация — является противоположным процессом декодирования данных, которые хранятся или направлены в стандарт json.
звучит как много технических терминов. определенно. но в реальности, все, о чем мы сейчас говорим — это чтение и написание. представьте это следующим образом: кодирование это запись данных на диск, в то время как декодирование — это чтение данных в памяти.
сериализация json
что происходит после того, как компьютер обрабатывает большие объемы информации? ему нужно принять дамп данных. соответственно, модуль json предоставляет метод dump() для записи данных в файлы. также есть метод dumps() для записей в строку python.







простые объекты python переводятся в json согласно с весьма интуитивной конверсией.



python
json


dict
object


list, tuple
array


str
string


int, long, float
number


true
true


false
false


none
null



пример сериализации json python
представьте, что вы работаете с объектом python в памяти, который выглядит следующим образом:

		
		
			data_file.json
			python
			
			
data = {
    "president": {
        "name": "zaphod beeblebrox",
        "species": "betelgeusian"
    }
}
			
				
					
				
					123456
				
						data = {;;;;"president": {;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;"species": "betelgeusian";;;;}}
					
				
			
		

сохранить эту информацию на диск — критично, так что ваша задача — записать на файл.
используя контекстный менеджер python, вы можете создать файл под названием data_file.json и открыть его в режиме write (файлы json имеют расширение .json).

		
		
			
			python
			
			
with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)
			
				
					
				
					12
				
						with open("data_file.json", "w") as write_file:;;;;json.dump(data, write_file)
					
				
			
		

обратите внимание на то, что dump() принимает два позиционных аргумента: (1) объект данных, который сериализуется и (2), файловый объект, в который будут вписаны байты.
или, если вы склонны продолжать использовать эти сериалзированные данные json в вашей программе, вы можете работать как со строкой.

		
		
			
			python
			
			
json_string = json.dumps(data)
			
				
					
				
					1
				
						json_string = json.dumps(data)
					
				
			
		

обратите внимание, что файловый объект является пустым, так как вы на самом деле не выполняете запись на диск. кроме того, dumps() аналогичен dump().
ура! у вас получился малыш json и вы можете выпустить его в реальный мир, чтобы он вырос большим и сильным.
несколько полезных аргументов
помните, что json создан таким образом, чтобы быть читаемым для людей. но читаемого синтаксиса недостаточно, если все слеплено вместе. кроме этого, ваш стиль программирования скорее всего отличается от моего, и вам будет проще читать код, если он отформатирован по вашему вкусу.
обратите внимание: методы dump() и dumps() пользуются одними и теми же аргументами ключевых слов.
первая опция, которую большинство людей хотят поменять, это пробел. вы можете использовать аргумент indent для определения размера отступа вложенных структур. ощутите разницу лично, используя данные, упомянутые выше и выполните следующие команды в консоли:

		
		
			
			python
			
			
json.dumps(data)
json.dumps(data, indent=4)
			
				
					
				
					12
				
						json.dumps(data)json.dumps(data, indent=4)
					
				
			
		

еще один вариант форматирования — это аргумент separators. по умолчанию, это двойной кортеж строк разделителя (&#171;, &#171;, &#171;: &#171;), но обычно в качестве альтернативы для компактного json является (&#171;,&#187;, &#171;:&#187;). взгляните на пример json еще раз, чтобы понять, где в игру вступают разделители.
есть и другие аргументы, такие как sort_keys, но я не имею понятия, что он делает. вы можете найти полный список в документации, если вам интересно.
десериализация json
отлично, похоже вам удалось поймать экземпляр дикого json! теперь нам нужно предать ему форму. в модуле json вы найдете load() и loads() для превращения кодированных данных json в объекты python.
как и сериализация, есть простая таблица конверсии для десериализации, так что вы можете иметь представление о том, как все выглядит.



json
python


object
dict


array
list


string
str


number (int)
int


number (real)
float


true
true


false
false


null
none



технически, эта конверсия не является идеальной инверсией таблицы сериализации. по сути, это значит что если вы кодируете объект сейчас, а затем декодируете его в будущем, вы можете не получить тот же объект назад. я представляю это как своего рода телепортацию: мои молекулы распадаются в точке а и собираются в точке б. буду ли я тем же самым человеком?







в реальности, это как попросить одного друга перевести что-нибудь на японский, а потом попросить другого друга перевести это обратно на русский. в любом случае, самым простым примером будет кодировать кортеж и получить назад список после декодирования, вот так:

		
		
			
			python
			
			
blackjack_hand = (8, "q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)

print(blackjack_hand == decoded_hand) # false

print(type(blackjack_hand)) # &lt;class 'tuple'&gt;
print(type(decoded_hand)) # &lt;class 'list'&gt;

print(blackjack_hand == tuple(decoded_hand)) # true
			
				
					
				
					12345678910
				
						blackjack_hand = (8, "q")encoded_hand = json.dumps(blackjack_hand)decoded_hand = json.loads(encoded_hand);print(blackjack_hand == decoded_hand) # false;print(type(blackjack_hand)) # &lt;class 'tuple'&gt;print(type(decoded_hand)) # &lt;class 'list'&gt;;print(blackjack_hand == tuple(decoded_hand)) # true
					
				
			
		


пример десериализации json python
на этот раз, представьте что у вас есть некие данные, хранящиеся на диске, которыми вы хотите манипулировать в памяти. вам все еще нужно будет воспользоваться контекстным менеджером, но на этот раз, вам нужно будет открыть существующий data_file.json в режиме для чтения.

		
		
			
			python
			
			
with open("data_file.json", "r") as read_file:
    data = json.load(read_file)
			
				
					
				
					12
				
						with open("data_file.json", "r") as read_file:;;;;data = json.load(read_file)
					
				
			
		

здесь все достаточно прямолинейно, но помните, что результат этого метода может вернуть любые доступные типы данных из таблицы конверсий. это важно только в том случае, если вы загружаете данные, которые вы ранее не видели. в большинстве случаев, корневым объектом будет dict или list.
если вы внесли данные json из другой программы, или полученную каким-либо другим способом строку json форматированных данных в python, вы можете легко десериализировать это при помощи loads(), который естественно загружается из строки:

		
		
			
			python
			
			
json_string = """
{
    "researcher": {
        "name": "ford prefect",
        "species": "betelgeusian",
        "relatives": [
            {
                "name": "zaphod beeblebrox",
                "species": "betelgeusian"
            }
        ]
    }
}
"""

data = json.loads(json_string)
			
				
					
				
					12345678910111213141516
				
						json_string = """{;;;;"researcher": {;;;;;;;;"name": "ford prefect",;;;;;;;;"species": "betelgeusian",;;;;;;;;"relatives": [;;;;;;;;;;;;{;;;;;;;;;;;;;;;;"name": "zaphod beeblebrox",;;;;;;;;;;;;;;;;"species": "betelgeusian";;;;;;;;;;;;};;;;;;;;];;;;}}""";data = json.loads(json_string)
					
				
			
		

ву а ля! вам удалось укротить дикого json, теперь он под вашим контролем. но что вы будете делать с этой силой — остается за вами. вы можете кормить его, выращивать, и даже научить новым приемам. не то чтобы я не доверяю вам, но держите его на привязи, хорошо?
пример работы с json python
для тестового api, мы воспользуемся jsonplaceholder, отличный источник фейковых данных json для практических целей.
для начала, создайте файл под названием scratch.py, или как вам удобно. здесь я не могу вас контролировать.
вам нужно выполнить запрос api в сервис jsonplaceholder, так что просто используйте пакет requests, чтобы он сделал за вас всю грязную работу. добавьте следующие импорты вверху файла:

		
		
			
			python
			
			
import json
import requests
			
				
					
				
					12
				
						import jsonimport requests
					
				
			
		

теперь вам предстоит поработать со списком todos, потому что… это своего рода обряд посвящения, вроде того.
идем дальше и создаем запрос в api jsonplaceholder для конечной точки get /todos. если вы слабо знакомы с запросами, есть очень удобный метод json(), который выполнит за вас всю работу, но вы можете попрактиковаться в использовании модуля json для десериализации атрибута текста объекта response. это должно выглядеть следующим образом:

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)
			
				
					
				
					12
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text)
					
				
			
		

не верится, что это работает? хорошо, запустите файл в интерактивном режиме и проверьте лично. пока вы там, проверьте тип todos. если вам любопытно, обратите внимание на первые 10 элементов в списке.

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

print(todos == response.json()) # true
print(type(todos)) # &lt;class 'list'&gt;

print(todos[:10]) # ...
			
				
					
				
					1234567
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);print(todos == response.json()) # trueprint(type(todos)) # &lt;class 'list'&gt;;print(todos[:10]) # ...
					
				
			
		

как видите, никто вас не обманывает, и мы ценим здравый скептицизм.
что такое интерактивный режим? я уже думал вы не спросите! вы знакомы с тем, что приходится постоянно прыгать туда-сюда между вашим редактором и терминалом? мы, хитрые питонисты, используем интерактивный флаг -i, когда запускаем скрипт. это отличный небольшой трюк для тестирования кода, так как он запускает скрипт, и затем открывает интерактивную командную строку с доступом ко всем данным скрипта!
хорошо, теперь перейдем к действиям. вы можете видеть структуру данных полученную от тестового api, посетив адрес в браузере https://jsonplaceholder.typicode.com/todos:

		
		
			
			python
			
			
{
    "userid": 1,
    "id": 1,
    "title": "delectus aut autem",
    "completed": false
}
			
				
					
				
					123456
				
						{;;;;"userid": 1,;;;;"id": 1,;;;;"title": "delectus aut autem",;;;;"completed": false}
					
				
			
		

здесь несколько пользователей, каждый из которых имеет уникальный userid, а каждая задача имеет свойство boolean. можете определить, какие пользователи выполнили большую часть задач?

		
		
			
			python
			
			
response = requests.get("https://jsonplaceholder.typicode.com/todos")
todos = json.loads(response.text)

# соотношение userid с числом выполненных пользователем задач.
todos_by_user = {}

# увеличение выполненных задач каждым пользователем.
for todo in todos:
    if todo["completed"]:
        try:
            # увеличение количества существующих пользователей.
            todos_by_user[todo["userid"]] += 1
        except keyerror:
            # новый пользователь, ставим кол-во 1.
            todos_by_user[todo["userid"]] = 1

# создание отсортированного списка пар (userid, num_complete).
top_users = sorted(todos_by_user.items(), 
                   key=lambda x: x[1], reverse=true)

#получение максимального количества выполненных задач.
max_complete = top_users[0][1]

# создание списка всех пользователей, которые выполнили
# максимальное количество задач.
users = []
for user, num_complete in top_users:
    if num_complete &lt; max_complete:
        break
    users.append(str(user))

max_users = " and ".join(users)
			
				
					
				
					1234567891011121314151617181920212223242526272829303132
				
						response = requests.get("https://jsonplaceholder.typicode.com/todos")todos = json.loads(response.text);# соотношение userid с числом выполненных пользователем задач.todos_by_user = {};# увеличение выполненных задач каждым пользователем.for todo in todos:;;;;if todo["completed"]:;;;;;;;;try:;;;;;;;;;;;;# увеличение количества существующих пользователей.;;;;;;;;;;;;todos_by_user[todo["userid"]] += 1;;;;;;;;except keyerror:;;;;;;;;;;;;# новый пользователь, ставим кол-во 1.;;;;;;;;;;;;todos_by_user[todo["userid"]] = 1;# создание отсортированного списка пар (userid, num_complete).top_users = sorted(todos_by_user.items(), ;;;;;;;;;;;;;;;;;; key=lambda x: x[1], reverse=true);#получение максимального количества выполненных задач.max_complete = top_users[0][1];# создание списка всех пользователей, которые выполнили# максимальное количество задач.users = []for user, num_complete in top_users:;;;;if num_complete &lt; max_complete:;;;;;;;;break;;;;users.append(str(user));max_users = " and ".join(users)
					
				
			
		

да, да, ваша версия лучше, но суть в том, что теперь вы можете манипулировать данными json как нормальным объектом python!
не знаю как вы, но я запустил скрипт в интерактивном режиме еще раз, и получил следующий результат:

		
		
			
			python
			
			
s = "s" if len(users) &gt; 1 else ""
print(f"user{s} {max_users} completed {max_complete} todos")
# users 5 and 10 completed 12 todos
			
				
					
				
					123
				
						s = "s" if len(users) &gt; 1 else ""print(f"user{s} {max_users} completed {max_complete} todos")# users 5 and 10 completed 12 todos
					
				
			
		

это круто, и все такое, но мы занимаемся изучением json. в качестве вашей последней задачи, вы создадите файл json, который содержит готовые задачи (todo) для каждого пользователя, который выполнил максимальное количество задач. здесь мы использовали f-строки python.
все, что вам нужно сделать, это отфильтровать задачи и вписать итоговый список в файл. ради оригинальности, вы можете назвать файл выдачи filtered_data_file.json. существует много способов сделать это, вот один из них:

		
		
			
			python
			
			
# определить функцию для фильтра выполненных задач
# с пользователями с максимально выполненными задачами.
def keep(todo):
    is_complete = todo["completed"]
    has_max_count = todo["userid"] in users
    return is_complete and has_max_count

# записать отфильтрованные задачи в файл
with open("filtered_data_file.json", "w") as data_file:
    filtered_todos = list(filter(keep, todos))
    json.dump(filtered_todos, data_file, indent=2)
			
				
					
				
					1234567891011
				
						# определить функцию для фильтра выполненных задач# с пользователями с максимально выполненными задачами.def keep(todo):;;;;is_complete = todo["completed"];;;;has_max_count = todo["userid"] in users;;;;return is_complete and has_max_count;# записать отфильтрованные задачи в файлwith open("filtered_data_file.json", "w") as data_file:;;;;filtered_todos = list(filter(keep, todos));;;;json.dump(filtered_todos, data_file, indent=2)
					
				
			
		

отлично, теперь вы избавились от всех данных, которые вам не нужны и сохранили необходимое для нового файла!
запустите скрипт еще раз и проверьте filtered_data_file.json, чтобы убедиться в том, что все работает. он будет в той же папке, что и scratch.py, когда вы запустите его.
теперь, когда вы зашли так далеко, вы начинаете понимать что коснулись темы с большим потенциалом, не так ли? не зазнавайтесь: скромность сестра таланта. хотя и не могу не согласиться. пока что мы работали в плавном потоке, но под конец мы можем поддать газку.
кодирование и декодирование объектов python
что случается, когда мы пытаемся сериализировать класс elf из приложения dungeons &amp; dragons, с которым вы работаете?

		
		
			
			python
			
			
class elf:
    def __init__(self, level, ability_scores=none):
        self.level = level
        self.ability_scores = {
            "str": 11, "dex": 12, "con": 10,
            "int": 16, "wis": 14, "cha": 13
        } if ability_scores is none else ability_scores
        self.hp = 10 + self.ability_scores["con"]
			
				
					
				
					12345678
				
						class elf:;;;;def __init__(self, level, ability_scores=none):;;;;;;;;self.level = level;;;;;;;;self.ability_scores = {;;;;;;;;;;;;"str": 11, "dex": 12, "con": 10,;;;;;;;;;;;;"int": 16, "wis": 14, "cha": 13;;;;;;;;} if ability_scores is none else ability_scores;;;;;;;;self.hp = 10 + self.ability_scores["con"]
					
				
			
		

ничего удивительного, возникла ошибка, что класс elf нельзя сериализировать:

		
		
			
			python
			
			
elf = elf(level=4)
json.dumps(elf)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					123
				
						elf = elf(level=4)json.dumps(elf)typeerror: object of type 'elf' is not json serializable
					
				
			
		

хотя, модуль json может обрабатывать большинство типов python, он не понимает, как кодировать пользовательские типы данных по умолчанию. это как пытаться поместить кубик в круглое отверстие — вам понадобится бензопила и надзор специалиста.
упрощение структур данных
сейчас вопрос в том, что делать с более сложными структурами данных. например, вы можете попробовать кодировать и декодировать json вручную, но есть более разумное решение, которое избавит вас от лишней работы. вместо того, чтобы идти непосредственно от пользовательского типа данных к json, вы можете перейти к промежуточному шагу.
все что вам нужно, это отобразить ваши данные в контексте встроенных типов, которые изначально понятны json. по сути, вы переводите более сложный объект в его упрощенное представление, которое модуль json затем переводит в json.
это наглядно представляется в математике: а = в, и в = с, значит а = с.
чтобы добиться этого, вам нужен сложный объект для работы. вы можете использовать любой пользовательский класс на ваш вкус, но python имеет встроенный тип под названием complex, для представления сложных чисел, и он не может быть сериализированным по умолчанию. итак, ради этих примеров, ваш сложный объект станет сложным объектом. уже запутались?

		
		
			
			python
			
			
z = 3 + 8j
print(type(z)) # &lt;class 'complex'&gt;

json.dumps(z)
typeerror: object of type 'complex' is not json serializable
			
				
					
				
					12345
				
						z = 3 + 8jprint(type(z)) # &lt;class 'complex'&gt;;json.dumps(z)typeerror: object of type 'complex' is not json serializable
					
				
			
		


откуда приходят комплексные числа? когда реальное число и представляемое число очень любят друг друга, они складываются вместе для создания числа, которое (справедливо) называется комплексным.
хороший вопрос, который стоит задать себе при работе со сложными типами: «какой минимальный объем информации необходим для воссоздания этого объекта?» в случае со комплексными числами, вам нужно знать только реальное и представляемое число, доступ к которым (в качестве атрибутов) доступен в объекте complex:

		
		
			
			python
			
			
z = 3 + 8j

print(z.real) # 3.0
print(z.imag) # 8.0
			
				
					
				
					1234
				
						z = 3 + 8j;print(z.real) # 3.0print(z.imag) # 8.0
					
				
			
		

передачи одних и тех же чисел в сложный конструктор достаточно для удовлетворения оператора сравнения __eq__:

		
		
			
			python
			
			
z = 3 + 8j

print( complex(3, 8) == z ) # true
			
				
					
				
					123
				
						z = 3 + 8j;print( complex(3, 8) == z ) # true
					
				
			
		

разбивать пользовательские типы данных на их составляющие компоненты — критически важно как для процесса сериализации, так и для десериализации.
кодирование пользовательских типов
для перевода пользовательского объекта в json, все что вам нужно — это предоставить функцию кодирования параметру по умолчанию метода dump(). модуль json вызовет эту функцию для любых объектов, которые не являются естественно сериализируемыми. вот простая функция декодирования, которую вы можете использовать на практике:

		
		
			
			python
			
			
def encode_complex(z):
    if isinstance(z, complex):
        return (z.real, z.imag)
    else:
        type_name = z.__class__.__name__
        raise typeerror(f"object of type '{type_name}' is not json serializable")
			
				
					
				
					123456
				
						def encode_complex(z):;;;;if isinstance(z, complex):;;;;;;;;return (z.real, z.imag);;;;else:;;;;;;;;type_name = z.__class__.__name__;;;;;;;;raise typeerror(f"object of type '{type_name}' is not json serializable")
					
				
			
		

обратите внимание на то, что ожидается получение ошибки typeerror, если вы не получите ожидаемый тип объекта. таким образом, вы избегаете случайной сериализации любых пользовательских типов. теперь вы можете кодировать сложные объекты самостоятельно!

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)
'[9.0, 5.0]'

&gt;&gt;&gt; json.dumps(elf, default=encode_complex)
typeerror: object of type 'elf' is not json serializable
			
				
					
				
					12345
				
						&gt;&gt;&gt; json.dumps(9 + 5j, default=encode_complex)'[9.0, 5.0]';&gt;&gt;&gt; json.dumps(elf, default=encode_complex)typeerror: object of type 'elf' is not json serializable
					
				
			
		


почему мы кодируем комплексное число как кортеж? хороший вопрос. это определенно не является единственными выбором, впрочем, как и не является лучшим выбором. фактически, это не может быть хорошим отображением, если вы планируете декодировать объект в будущем, что вы и увидите дальше.
еще один частый подход — создать дочерний класс jsonencoder и переопределить его метод default():

		
		
			
			python
			
			
class complexencoder(json.jsonencoder):
    def default(self, z):
        if isinstance(z, complex):
            return (z.real, z.imag)
        else:
            super().default(self, z)
			
				
					
				
					123456
				
						class complexencoder(json.jsonencoder):;;;;def default(self, z):;;;;;;;;if isinstance(z, complex):;;;;;;;;;;;;return (z.real, z.imag);;;;;;;;else:;;;;;;;;;;;;super().default(self, z)
					
				
			
		

вместо создания ошибки typeerror, вы можете дать классу base справиться с ней. вы можете использовать его как напрямую в метод dump() при помощи параметра cls, или создав экземпляр encoder-а и вызова метода encode():

		
		
			
			python
			
			
&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)
'[2.0, 5.0]'

&gt;&gt;&gt; encoder = complexencoder()
&gt;&gt;&gt; encoder.encode(3 + 6j)
'[3.0, 6.0]'
			
				
					
				
					123456
				
						&gt;&gt;&gt; json.dumps(2 + 5j, cls=complexencoder)'[2.0, 5.0]';&gt;&gt;&gt; encoder = complexencoder()&gt;&gt;&gt; encoder.encode(3 + 6j)'[3.0, 6.0]'
					
				
			
		


декодирование пользовательских типов
в то время, как реальные и представляемые части сложных чисел абсолютно необходимы, на самом деле их не совсем достаточно для воссоздания объекта. вот что случается, если вы попробуете кодировать комплексное число при помощи complexencoder, а затем декодировать результат:

		
		
			
			python
			
			
&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)
&gt;&gt;&gt; json.loads(complex_json)
[4.0, 17.0]
			
				
					
				
					123
				
						&gt;&gt;&gt; complex_json = json.dumps(4 + 17j, cls=complexencoder)&gt;&gt;&gt; json.loads(complex_json)[4.0, 17.0]
					
				
			
		

все что вы получаете обратно — это список, и вы можете передать значения в конструктор, если вы хотите получить этот сложный объект еще раз. напоминаю о нашем разговоре о телепортации. чего нам в итоге не хватает? метаданные, или информации о типа данных, которые вы кодируете.
я предполагаю, что вопрос, который действительно важно задать себе, это «какое минимальное количество информации, которая необходима, и которой достаточно для воссоздания объекта?»
модуль json ожидает, что все пользовательские типы будут отображаться как объекты стандарта json. для разнообразия, вы можете создать файл json, на этот раз назовем его complex_data.json и добавим следующий объект, отображающий комплексное число:

		
		
			complex_data.json
			python
			
			
{
    "__complex__": true,
    "real": 42,
    "imag": 36
}
			
				
					
				
					12345
				
						{;;;;"__complex__": true,;;;;"real": 42,;;;;"imag": 36}
					
				
			
		

заметили хитрую часть? вот ключ &#171;__complex__&#187; является метаданными, которые мы только что упоминали. неважно, какое ассоциируемое значение мы имеем. чтобы эта хитрость сработала, все что вам нужно, это подтвердить существование ключа:

		
		
			
			python
			
			
def decode_complex(dct):
    if "__complex__" in dct:
        return complex(dct["real"], dct["imag"])
    return dct
			
				
					
				
					1234
				
						def decode_complex(dct):;;;;if "__complex__" in dct:;;;;;;;;return complex(dct["real"], dct["imag"]);;;;return dct
					
				
			
		

если &#171;__complex__&#187; не находится в словаре, вы можете просто вернуть объект и позволить декодеру по умолчанию разобраться с этим.
каждый раз, когда метод load() пытается парсить объект, у вас есть возможность выступить в роли посредника, перед тем как декодер пройдет свой путь с данными. вы можете сделать это, спарсив вашу функцию декодирования с параметром object_hook.
теперь сыграем в ту же игру, что и раньше:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    z = json.loads(data, object_hook=decode_complex)

print(type(z)) # &lt;class 'complex'&gt;
			
				
					
				
					12345
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;z = json.loads(data, object_hook=decode_complex);print(type(z)) # &lt;class 'complex'&gt;
					
				
			
		

хотя объект object_hook может показаться аналогом параметра по умолчанию метода dump(), на самом деле аналогия здесь же и заканчивается.
это не просто работает с одним объектом. попробуйте внести этот список сложных чисел в complex_data.json и запустить скрипт еще раз:

		
		
			
			python
			
			
[
  {
    "__complex__":true,
    "real":42,
    "imag":36
  },
  {
    "__complex__":true,
    "real":64,
    "imag":11
  }
]
			
				
					
				
					123456789101112
				
						[;;{;;;;"__complex__":true,;;;;"real":42,;;;;"imag":36;;},;;{;;;;"__complex__":true,;;;;"real":64,;;;;"imag":11;;}]
					
				
			
		

если все идет гладко, вы получите список комплексных объектов:

		
		
			
			python
			
			
with open("complex_data.json") as complex_data:
    data = complex_data.read()
    numbers = json.loads(data, object_hook=decode_complex)


print(numbers) # [(42+36j), (64+11j)]
			
				
					
				
					123456
				
						with open("complex_data.json") as complex_data:;;;;data = complex_data.read();;;;numbers = json.loads(data, object_hook=decode_complex);;print(numbers) # [(42+36j), (64+11j)]
					
				
			
		

вы также можете попробовать создать подкласс jsondecoder и переопределить object_hook, но лучше придерживаться более легких решений при каждой возможности.
итоги
поздравляю, теперь вы обладаете могущественной силой json для любых ваших потребностей в python.







хотя примеры, с которыми вы работали, безусловно, оригинальные и чрезмерно упрощены, они демонстрируют рабочий процесс, который вы можете применить к более общим задачам:

импорт модуля json
чтение данных с load() или loads()
обработка данных
запись измененных данных при помощи dump() или dumps()

что вы будете делать с данными, после того как они загрузились в память — зависит от вашего случая. в целом, ваша задача — собрать данные из источника, извлечение полезной информации, и передача этой информации (или ее запись).
сегодня вы проделали небольшое путешествие: вы поймали и приручили json, и вернулись домой как раз к ужину! и в качестве бонуса, научившись работать с модулем json, можете начать изучение модулей pickle и marshal.
спасибо за внимание, и удачи с вашими начинаниями в python!	

    
















    












		
	




	
	

vk паблик программистовмы выкладываем новые статьи и уроки в наш паблик vk: @open_sourcecodetelegram программистову нас есть чат для python программистов: @python_scripts и канал с уроками, книгами и видео @pip_install
	


	
	
	





    
        

        
            yelly
            
                уроки tkinter
уроки pycairo
установка python 3 на linux
            
        

        
            




	




        
    
    




    
    





























----------------------------------------
https://python.hotexamples.com/ru/examples/pyquery/PyQuery/-/python-pyquery-class-examples.html
----------------------------------------



    
    
    
            
        
                
        
        
    
        python pyquery примеры, pyquery.pyquery python примеры использования - hotexamples
    

                                        
                                                
                                                                    
                        
    
    
    
    
    
    
    
    
    
    


    toggle navigation


hot examplesru en
ru
de            
            

    
                    
                
                    python
                
                
                                            
                            
                                php                            
                        
                                            
                            
                                c#                            
                        
                                            
                            
                                java                            
                        
                                            
                            
                                go                            
                        
                                            
                            
                                c++                            
                        
                                            
                            
                                python                            
                        
                                            
                            
                                js                            
                        
                                    
            
                

        
            найти        
    



        
            
        
        
            python pyquery примеры использования

                                    
                                    
            
            
            
            
        
                                    
            
            
                                
                    python pyquery - 30 примеров найдено. это лучшие примеры python кода для pyquery.pyquery, полученные из open source проектов. вы можете ставить оценку каждому примеру, чтобы помочь нам улучшить качество примеров.                                        
    язык программирования: python
                        
                пространство имен/пакет: pyquery            
                            класс/тип: pyquery
            
                                
            примеров на hotexamples.com: 30        
    
                
                            

                                    
                                    
            
            
            
            
        
                                    
            

                            
                    

    основные методы
    
        показать
        скрыть
    


            
            attr(30)
        
                    
            find(30)
        
                    
            text(30)
        
                    
            html(20)
        
                    
            children(19)
        
                    
            remove(15)
        
                    
            split(10)
        
                    
            __unicode__(8)
        
                    
            outerhtml(7)
        
                    
            eq(5)
        
                    
            make_links_absolute(5)
        
                    
            outer_html(5)
        
                    
            __init__(4)
        
                    
            encode(4)
        
                    
            items(4)
        
                    
            replace(4)
        
                    
            replacewith(3)
        
                    
            append(2)
        
                    
            decode(2)
        
                    
            get(2)
        
                    
            parents(2)
        
                    
            __html__(1)
        
                    
            attr["__riot_tag__"](1)
        
                    
            attr["__riot_uuid__"](1)
        
                    
            attr["data-riot-id"](1)
        
                    
            attr["data-riot-loopindex"](1)
        
                    
            closest(1)
        
                    
            css(1)
        
                    
            empty(1)
        
                    
            filter(1)
        
                    
            hasclass(1)
        
                    
            height(1)
        
                    
            insertbefore(1)
        
                    
            lower(1)
        
                    
            parent(1)
        
                    
            prev(1)
        
                    
            prevall(1)
        
                    
            read(1)
        
                    
            size(1)
        
                    
            startswith(1)
        
                    
            val(1)
        
                    
            width(1)
        
                    
            xhtml_to_html(1)
        
            
                
                    
        
                            
                                                                    
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            attr                (30)
        
            
            find                (30)
        
            
            text                (30)
        
            
            html                (20)
        
            
            children                (19)
        
            
            remove                (15)
        
            
            split                (10)
        
            
            __unicode__                (8)
        
            
            outerhtml                (7)
        
            
            eq                (5)
        
    

                                                
                                    
            
            
            
            
        
                                    
                            
    
        основные методы    


            
            make_links_absolute                (5)
        
            
            outer_html                (5)
        
            
            __init__                (4)
        
            
            encode                (4)
        
            
            items                (4)
        
            
            replace                (4)
        
            
            replacewith                (3)
        
            
            append                (2)
        
            
            decode                (2)
        
            
            get                (2)
        
            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
    

                                        
    
        основные методы    


            
            parents                (2)
        
            
            __html__                (1)
        
            
            attr["__riot_tag__"]                (1)
        
            
            attr["__riot_uuid__"]                (1)
        
            
            attr["data-riot-id"]                (1)
        
            
            attr["data-riot-loopindex"]                (1)
        
            
            closest                (1)
        
            
            css                (1)
        
            
            empty                (1)
        
            
            filter                (1)
        
            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

                                        

    
        related in langs
    
    
                    
                replayinterface (php)
            
                    
                existe_chamada (php)
            
                    
                dvector2 (c#)
            
                    
                dvector3 (c#)
            
                    
                gtk_button (c++)
            
                    
                do_output (c++)
            
                    
                unmarshal (go)
            
                    
                makehttphandler (go)
            
                    
                trufflecompileroptions.trufflecompilationstatisticdetails (java)
            
                    
                inventorymerchant (java)
            
                    
                find (js)
            
                    
                grammar (js)
            
            
        
    
        основные методы    


            
            hasclass                (1)
        
            
            height                (1)
        
            
            insertbefore                (1)
        
            
            lower                (1)
        
            
            parent                (1)
        
            
            prev                (1)
        
            
            prevall                (1)
        
            
            read                (1)
        
            
            size                (1)
        
            
            startswith                (1)
        
            
            val                (1)
        
            
            width                (1)
        
            
            xhtml_to_html                (1)
        
    

        

    
        related
    
    
                    
                visiblemap
            
                    
                solrclient
            
                    
                is_card_valid
            
                    
                crypt_hash
            
                    
                cppblockwidget
            
                    
                sequence_loss
            
                    
                xform
            
                    
                save_data
            
                    
                gt_log_warn
            
                    
                bankers_round
            
            
                
                        
                

                
                
                                        

    
        
            пример #1
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        shein.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
             def parseproductsbycategory(self, category_page_content, category_info):
     self.num_idx = 0
     if self.current_category == category_info:
         self.page_idx = self.page_idx + 1
     else:
         self.current_category = category_info
         self.page_idx = 1
     doc = pyquery(category_page_content)
     productnodelist = doc(;div#productscontent1_goods &gt; div;)
     productlist = []
     for productnode in productnodelist:
         productnodeq = pyquery(productnode)
         self.num_idx = self.num_idx + 1
         productinfo = self.newproduct()
         productinfo[;sku_id;] = productnodeq.attr(;alt1;)
         productinfo[;name;] = productnodeq(;div.goods_mz &gt; a;).text().strip()
         productinfo[;product_url;] = productnodeq(;div.goods_mz &gt; a;).attr(;href;)
         productinfo[;img_url;] = productnodeq(;div.goods_aimg &gt; a &gt; img;).attr(;src;)
         productinfo[;price;] = productnodeq(;div#cat-product-list_usd &gt; span.special_price;).attr(;price;)
         productinfo[;original_price;] = productnodeq(;div#cat-product-list_usd &gt; span.shop_price;).attr(;price;)
         productinfo[;page_idx;] = str(self.page_idx)
         productinfo[;num_idx;] = str(self.num_idx)
         productinfo.set_categories(category_info)
         productlist.append(productinfo)
     return productlist
        
    

                                    
                                    
            
            
            
            
        
                                    
                                    

    
        
            пример #2
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_txt_for_sec(index, node):
    ce = pyquery(node)
    rowtxt = ce.text()
    cols = ce(;td;)
    curr_dep = len(cols)
    if curr_dep &gt; 1:
        print rowtxt.encode(;utf-8;)
        
    

                                        
                                    
            
            
            
            
        
                                    
                                

    
        
            пример #3
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        locustfile.py
                    
                                
                                            проект:
                                        uchicago-cs/icpc-tools
                
            
        
    
    
        
                def __login(self, username, password):
        r = self.client.get(;/login/login.php;, verify=false)
        pq = pyquery(r.content, parser=;html;)
        session = pq.find(;input[name=session_name];)[0].value

        r = self.client.post(
            ;/login/login.php;, {;username;: username, ;password;: password, ;session_name;: session}, verify=false
        )

        self.session = session
        self.runclar_countdown = 5

        # fetch iframes in main page
        r = self.client.get(;/team/isubmit.php?session_name=%s; % self.session, name=;/team/isubmit.php;, verify=false)
        r = self.client.get(
            ;/team/isendclarification.php?session_name=%s; % self.session,
            name=;/team/isendclarification.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iviewruns.php?session_name=%s; % self.session, name=;/team/iviewruns.php;, verify=false
        )
        r = self.client.get(
            ;/team/iviewclarifications.php?session_name=%s; % self.session,
            name=;/team/iviewclarifications.php;,
            verify=false,
        )
        r = self.client.get(
            ;/team/iscoreboard.php?session_name=%s; % self.session, name=;/team/iscoreboard.php;, verify=false
        )
        
    

                                            
                                    
            
            
            
            
        
                                    
                            

    
        
            пример #4
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        meme.py
                    
                                
                                            проект:
                                        pombredanne/memepy
                
            
        
    
    
        
            def get_meme_url(meme):
    gen = generators.get(meme)
    if gen:
        pq = pyquery(url=;http://memegenerator.net/%s; % gen[2])
        return pq.find(;a img.large;).attr(;src;)
    else:
        return none
        
    

                                    

    
        
            пример #5
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_1688_category_tree(wb):
    # fr = open(;c:users/chenweiqiang/desktop/ye.html;, ;r;) #pyquery之后取不出来元素
    h = httplib2.http()
    response, content = h.request(;https://ye.1688.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/ye2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;ye.1688品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;li.cat-box;)
    for level1node in level1nodelist:
        level1nodeq = pyquery(level1node)
        level1_category = level1nodeq(;div.cat-main;).text().replace(; ;, ;;)
        level2nodelist = level1nodeq(;div.cat-sub-col &gt; dl;)  # 多余div[class=;cat-sub ;] &gt;
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq(;dt &gt; a;).text()
            level3nodelist = level2nodeq(;dd.cat-list &gt; ul &gt; li &gt; a;)
            for level3node in level3nodelist:
                level3nodeq = pyquery(level3node)
                level3_category = level3nodeq.text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                                    

    
        
            пример #6
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        sciparse.py
                    
                                
                                            проект:
                                        jmcarp/sciscrape
                
            
        
    
    
        
                def _parse_table(self, table):

        # initialize table
        parsed_rows = []

        # parse table
        qtable = pyquery(table)

        # get headers
        headers = self._get_headers(qtable)
        if not headers:
            return

        # get rows
        rows = qtable.find(;tr;)

        # loop over rows
        for row in rows:

            # get columns
            qrow = pyquery(row)
            cols = qrow.find(;td;).map(self._get_text)[:]

            # parse column values
            for colidx in range(len(cols)):
                col = reduce(lambda x, y: re.sub(y[0], y[1], x), self._trans, cols[colidx])
                cols[colidx] = col

            # append parsed columns
            if cols:
                parsed_rows.append(cols)

        return {;headers;: headers, ;data;: parsed_rows}
        
    

                        

    
        
            пример #7
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        forums.py
                    
                                
                                            проект:
                                        roromis/lalf-forumactif
                
            
        
    
    
        
                def get_subforums_infos(self, html):
        ;;;
        get informations (description, number of topics and posts, ...) about
        the forums listed on a page
        ;;;
        document = pyquery(html)

        idpattern = re.compile(r;/([fc]\d+)-.*;)

        for element in document(;a.forumlink;):
            e = pyquery(element)

            match = idpattern.fullmatch(clean_url(e.attr(;href;)))
            if not match:
                continue

            oldid = match.group(1)

            row = e.closest(;tr;)

            # get forum status
            alt = row(;td:nth-of-type(1) img;).eq(0).attr(;alt;)
            self.forums[oldid].status = 1 if ;verrouillé; in alt else 0

            # get subforum description
            self.forums[oldid].description = row(;td:nth-of-type(2) span;).eq(1).html() or ;;

            # todo : get subforum icon

            # get subforum numbers of topics and posts
            self.forums[oldid].num_topics = int(row(;td;).eq(2).text())
            self.forums[oldid].num_posts = int(row(;td;).eq(3).text())
        
    

                        

    
        
            пример #8
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def parsepage(content):
    doc = pyquery(content)
    productnodelist = doc(;ul#sm-offer-list &gt; li;)
    productlist = []
    for node in productnodelist:
        nodeq = pyquery(node)
        p = product()
        p[;product_name;] = nodeq(&#039;a[offer-stat=;title;]&#039;).text()
        url = nodeq(&#039;a[offer-stat=;title;]&#039;).attr(;href;)
        if url.find(;http;) == 0:
            p[;product_url;] = url
        else:
            p[;product_url;] = ;http:; + url
        p[;product_price;] = nodeq(;span.sm-offer-pricenum;).text()
        p[;img_url;] = nodeq(&#039;a[offer-stat=;pic;] &gt; img&#039;).attr(;src;)
        p[;sku_id;] = nodeq.attr(;t-offer-id;)

        p[;store_name;] = nodeq(;a.sm-offer-companyname;).text()
        p[;store_url;] = nodeq(;a.sm-offer-companyname;).attr(;href;)
        print p[;store_url;]
        p[;tags;] = []
        alist = nodeq(;div.sm-offer-subicon &gt; a;)
        for a in alist:
            s = pyquery(a).attr(;class;)
            if s:
                p[;tags;].append(s)
        p[;tags;] = ;, ;.join(p[;tags;])
    #         parseproductpage(p, true)
    #         parsestorepage(p)
    #         productlist.append(p)
    # return productlist #测试
    return productlist
        
    

                        

    
        
            пример #9
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_pages.py
                    
                                
                                            проект:
                                        marketionist/aldryn-events
                
            
        
    
    
        
                def test_ongoing_events_in_event_list(self, managers_timezone_mock, tag_timezone_mock):
        managers_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)
        tag_timezone_mock.now.return_value = tz_datetime(2014, 4, 7, 9, 30)

        root_page = self.create_root_page(publication_date=tz_datetime(2014, 4, 1))
        root_page.publish(;en;)
        page = api.create_page(
            title=;events en;,
            template=self.template,
            language=;en;,
            published=true,
            parent=root_page,
            apphook=;eventlistapphook;,
            apphook_namespace=self.app_config.namespace,
            publication_date=tz_datetime(2014, 4, 1),
        )
        page.publish(;en;)

        # happens in apr 5
        ev1 = self.create_event(title=;ev1;, start_date=tz_datetime(2014, 4, 5), publish_at=tz_datetime(2014, 4, 1))
        # apr 6 12:00 to apr 7 9:00
        ev2 = self.create_event(
            title=;ev2;,
            start_date=tz_datetime(2014, 4, 6),
            end_date=tz_datetime(2014, 4, 7),
            start_time=;12:00;,
            end_time=;09:00;,
            publish_at=tz_datetime(2014, 4, 2),
        )
        # happens in apr 7
        ev3 = self.create_event(title=;ev3;, start_date=tz_datetime(2014, 4, 7), publish_at=tz_datetime(2014, 4, 3))
        # happens in apr 8
        ev4 = self.create_event(title=;ev4;, start_date=tz_datetime(2014, 4, 8), publish_at=tz_datetime(2014, 4, 4))

        # setup app config
        original_show_ongoing_first = self.app_config.app_data.config.show_ongoing_first
        self.app_config.app_data.config.show_ongoing_first = true
        self.app_config.save()

        with force_language(;en;):
            response = self.client.get(page.get_absolute_url(;en;))
            context = response.context_data

        # teardown app config
        self.app_config.app_data.config.show_ongoing_first = original_show_ongoing_first
        self.app_config.save()

        actual_ongoing = [event.pk for event in context[;ongoing_objects;]]
        expected_ongoing = [event.pk for event in [ev2, ev3]]
        self.assertequal(actual_ongoing, expected_ongoing)

        actual_object_list = [event.pk for event in context[;object_list;]]
        expected_object_list = [event.pk for event in [ev4, ev1]]
        self.assertequal(actual_object_list, expected_object_list)

        ongoing_list = pyquery(response.content)(;.events-upcoming;)
        links = ongoing_list.find(;h2 a;)
        self.assertequal(2, links.length)
        self.assertequal(ev4.get_absolute_url(), links[0].attrib[;href;])
        self.assertequal(ev1.get_absolute_url(), links[1].attrib[;href;])
        
    

                        

    
        
            пример #10
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        nianjian.py
                    
                                
                                            проект:
                                        yuejiahua/cnkiexcel
                
            
        
    
    
        
             def get_year_of_nianjian(self):
     req = urllib2.request(self.url, none, self.req_header)
     response = urllib2.urlopen(req)
     rawdata = myutils.ungzip(response)
     year_num = len(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;))
     i = 0
     while i &lt; year_num:
         j = 0
         while j &lt; 5 and i &lt; year_num:
             li = pyquery(pyquery(rawdata.decode(;utf-8;))(;.list_h li a;)[i])
             folder = myutils.filenamecheck(li.text())
             folder = os.path.join(self.root, folder)
             try:
                 os.mkdir(folder)
             except exception, e:
                 print ;%s created error; % (folder)
                 i = i + 1
                 j = j + 1
             else:
                 href = ;http://tongji.cnki.net/kns55/navi/; + li.attr(;href;)
                 i = i + 1
                 j = j + 1
                 self.threads.append(yearpage(os.path.join(self.root, li.text()), href))
         for t in self.threads:
             if not t.isalive():
                 t.start()
         t.join()
         self.threads = []
        
    

                        

    
        
            пример #11
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_expression.py
                    
                                
                                            проект:
                                        soasme/riotpy
                
            
        
    
    
        
            def test_render_attribute_to_document():
    document = pyquery(&#039;&lt;a attribute=;{ value }; data-riot-id=;0;&gt;&lt;/a&gt;&#039;)
    expression = {;expression;: ;{ value };, ;attribute;: ;attribute;, ;type;: ;attribute;, ;node;: document}
    render_document([expression], {;value;: ;value;})
    assert document.outer_html() == &#039;&lt;a attribute=;value; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
    render_document([expression], {;value;: 1})
    assert document.outer_html() == &#039;&lt;a attribute=;1; data-riot-id=;0; data-riot-dirty=;true;&gt;&lt;/a&gt;&#039;
        
    

                        

    
        
            пример #12
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        pics_1688.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def get_img_urls(content):
    if not content:
        return []
    url_list = []
    doc = pyquery(content)
    nodelist = doc(;li.tab-trigger &gt; div.vertical-img &gt; a.box-img &gt; img;)
    for node in nodelist:
        url = pyquery(node).attr(;src;)
        if not url:
            continue
        if url.find(;60x60;) &gt; 0:
            url = url.replace(;60x60;, ;400x400;)
            url_list.append(url)
    needdescimg = true
    if needdescimg:
        link_url = doc(;div#desc-lazyload-container;).attr(;data-tfs-url;)
        if not link_url:
            return url_list
        desc_content = fetchpagewithurl(link_url)
        # 懒惰匹配模式
        imgnodes = re.findall(;&lt;img[^&lt;&gt;]*&gt;.*?;, desc_content)
        # desc_content = re.sub(&#039;var[\s]*offer_details[\s]*=[\s]*&#039;, &#039;&#039;, desc_content)
        for node in imgnodes:
            nodeq = pyquery(node)
            desc_url = nodeq(;img;).attr(;src;)
            if desc_url:
                desc_url = desc_url.replace(&#039;\\;&#039;, ;;)
            if not desc_url:
                continue
            if ;gif; in desc_url:  # gif图片不要
                continue
            # if &#039;//gd&#039; in desc_url or &#039;/2015/&#039; in desc_url:
            url_list.append(desc_url)
    return url_list
        
    

                        

    
        
            пример #13
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        tarena_tts5.py
                    
                                
                                            проект:
                                        lpjhblpj/python
                
            
        
    
    
        
            def try_account(id_list, default_pass):
    ;;;
    暴力破解帐号密码
    :param id_list:帐号列表
    :param default_pass:默认密码
    :return:
    ;;;
    for id_item in id_list:
        form_data[;loginname;] = str(id_item)  # 将用户名填入表单
        form_data[;password;] = default_pass  # 将密码填入表单
        code_img_name = get_code_img()
        code_str = code_img_to_string(code_img_name)
        form_data[;verify;] = code_str  # 验证码填入表单
        result = login()  # 登录，获取返回的 response 结果
        print form_data
        err_msg = pq(result).find(;.login_panel .ul_login li:eq(4) span;).text()
        print err_msg.decode(;utf-8;)
        if err_msg == u;验证码错误;:
            # 获取验证码重新登录
            code_img_name = get_code_img()
            code_str = code_img_to_string(code_img_name)
            form_data[;verify;] = code_str
            result = login()
        if err_msg == u;用户名或者密码错误;:
            continue
        if err_msg is none:
            print ;成功破解：; + str(id_item) + ;\t; + result  # 打印成功登录的帐号
        
    

                        

    
        
            пример #14
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        composition.py
                    
                                
                                            проект:
                                        misaelnieto/collective.composition
                
            
        
    
    
        
             def render(self, edit=false):
     layout = self.current_layout
     rendered = layout.render()
     if not edit:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;view-widget;&gt;
           %(content)s
         &lt;/div&gt;
         ;;;
     else:
         widget_markup = ;;;
         &lt;div id=;%(wid)s; class=;widget;&gt;
           &lt;div class=;widget-head;&gt;&lt;h3&gt;%(title)s&lt;/h3&gt;&lt;/div&gt;
           &lt;div class=;widget-content;&gt;%(content)s&lt;/div&gt;
         &lt;/div&gt;
         ;;;
     pq = pyquery(rendered)
     for column, addwidgets in self.widget_map.items():
         for addwidget in addwidgets:
             try:
                 widget = self[addwidget]
             except keyerror:
                 continue
             widget_info = {
                 ;col;: column,
                 ;wid;: addwidget,
                 ;title;: widget.title,
                 ;content;: widget.render(),
                 ;url;: widget.absolute_url(),
             }
             pq(;#%s; % column).append(widget_markup % widget_info)
     return pq.outerhtml()
        
    

                        

    
        
            пример #15
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_complete(self):
     url = self.generate_password_reset_url()
     response = self.test_client.post(url, {;new_password1;: ;newpass;, ;new_password2;: ;newpass;}, follow=true)
     query = pyquery(response.content)
     query = query(;div p:last;).prevall()
     msg = ;password reset complete your password has been set.  you may ; + ;go ahead and log in now.;
     self.assertequal(query.text(), msg)
        
    

                        

    
        
            пример #16
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        create_htaccess.py
                    
                                
                                            проект:
                                        kjirou/goodbye_mt3
                
            
        
    
    
        
            def _main():
    # u&#039;&lt;title&gt;&#039;:&#039;&lt;url&gt;&#039; sets
    mt_pages = {}
    wp_pages = {}

    # mt
    request = requests.get(mt_archives_url)
    document = pyquery(request.content)
    archive_list = document(;#pagebody .archive-list a;)
    for archive in archive_list:
        archive = pyquery(archive)
        mt_pages[archive.text()] = archive.attr(;href;)

    # wp
    fh = open(wp_archives_file_path, ;r;)
    document = pyquery(fh.read(), parser=;xml;)
    items = document(;channel item;)
    for item in items:
        item = pyquery(item)
        wp_pages[item(;title;).text()] = item(;link;).text()

    # create .htaccess
    fh = open(base_dir + ;/tmp/.htaccess;, ;a;)
    for title, href in mt_pages.items():
        if title in wp_pages:
            fh.write(
                ;redirect permanent %s %s\n; % (re.sub(r;http://kjirou\.sakura\.ne\.jp;, ;;, href), wp_pages[title])
            )
    fh.write(;redirect permanent /mt/index.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/atom.xml http://blog.kjirou.net/feed\n;)
    fh.write(;redirect permanent /mt/archives.html http://blog.kjirou.net\n;)
    fh.write(;redirect permanent /mt http://blog.kjirou.net\n;)
        
    

                        

    
        
            пример #17
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_bad_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;badmail@test.com;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;that e-mail address doesn&#039;t have an associated user ; + ;account. are you sure you&#039;ve registered?;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #18
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        __init__.py
                    
                                
                                            проект:
                                        peppelorum/svtcrawler
                
            
        
    
    
        
                def next(self):
        if self.i == self.categories_iter.length:
            raise stopiteration

        link = self.categories_iter[self.i]

        py_link = pyquery(link)
        href = py_link.attr(;href;)
        html_class = href.split(;/;)[-1:][0]
        title = py_link.text()
        thumbnail_url = self.crawler.baseurl + pyquery(link).find(;img;).attr(;src;)
        url = self.crawler.category_url % href

        category = category(title, url, html_class, thumbnail_url)
        shows = shows(self.crawler, url)

        tmp = list()
        tmp.append(shows)

        if title == ;nyheter;:
            news_url = self.crawler.news_url % href
            news_shows = shows(self.crawler, news_url)
            tmp.append(news_shows)

        category.shows = itertools.chain(*tmp)

        self.i += 1
        return category
        
    

                        

    
        
            пример #19
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        download-all-plogs.py
                    
                                
                                            проект:
                                        peterbe/django-peterbecom
                
            
        
    
    
        
            def get_urls():
    doc = pyquery(;https://www.peterbe.com/plog/;)
    doc.make_links_absolute(base_url=;https://www.peterbe.com;)
    urls = []
    for a in doc(;dd a;):
        urls.append(a.attrib[;href;])
    return urls
        
    

                        

    
        
            пример #20
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        test_settings_translation.py
                    
                                
                                            проект:
                                        razvanch/meetings-registration-tool
                
            
        
    
    
        
            def test_meeting_registration_success_phrases(app, user, default_meeting):
    meeting = add_new_meeting(app, user)
    category = meetingcategoryfactory(meeting=meeting)
    online_phrase = meeting.phrases.filter_by(group=phrase.online_registration, name=phrase.participant).scalar()
    online_phrase.description.english = ;online success message;
    online_phrase.description.french = ;bonjour monsiuer online;
    email_phrase = meeting.phrases.filter_by(group=phrase.email_confirmation, name=phrase.for_participants).scalar()
    email_phrase.description.english = ;email success message;
    email_phrase.description.french = ;bonjour monsiuer email;

    data = participantfactory.attributes()
    data[;category_id;] = category.id
    data[;language;] = ;french;

    client = app.test_client()
    with app.test_request_context():
        add_custom_fields_for_meeting(meeting)
        populate_participant_form(meeting, data)
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;fr;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.french

        data[;language;] = ;english;
        resp = client.post(url_for(;meetings.registration;, meeting_acronym=meeting.acronym, lang=;en;), data=data)
        assert resp.status_code == 200
        success_message = pyquery(resp.data)(;.text-center h4;)
        assert success_message.text() == online_phrase.description.english
        
    

                        

    
        
            пример #21
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        lw_xw.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#rightdiv1;)
        content_node.remove(;span.white12;)
        item = contentitem()
        content_node = content_node.__unicode__()
        img_all = []
        img = &#039;leftsmallimgurl\[1\]\=;(.*?);\;&#039;
        ob = re.compile(img)
        imgs = ob.findall(doc.__unicode__())
        if not imgs:
            image = ;;
        else:
            image = &#039;&lt;br/&gt;&lt;img src=;&#039; + imgs[0] + &#039;;/&gt;&lt;br/&gt;&#039;
            img_all.append(self.getrealuri(imgs[0]))
        content_node = image + content_node
        item[;image_urls;] = img_all

        item[;title;] = self.title = doc(;h1;).text()
        item[;content;] = self.content = content_node

        item[;release_time;] = ;;
        #        item[&#039;release_switch_time&#039;] = self.release_switch_time = time.time()
        item[;source;] = u;瑞丽服饰网;
        item[;author;] = ;;
        item[;pic_url;] = ;;

        self.title = item[;title;]
        self.content = item[;content;]

        return item
        
    

                        

    
        
            пример #22
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weiphone.py
                    
                                
                                            проект:
                                        jshi-git/downloadhelpers
                
            
        
    
    
        
            def download(threadurl):
    ;;;
    ;;;
    d = pyquery(url=threadurl, parser=&#039;soup&#039;)
    links = d(&#039;a[href^=;job.php?action=download&amp;aid=;]&#039;)

    # 获取 verify 的值
    tmp = d(&#039;script:contains(;var verifyhash =;)&#039;).text()
    verify = re.search(r;var verifyhash = &#039;(.*?)&#039;;, tmp).group(1)

    total = len(links)
    d.make_links_absolute()
    for i, e in enumerate(links.items(), start=1):
        filename = e.text()
        print(&#039;%s/%s %s&#039; % (i, total, filename))

        if not os.path.exists(os.path.join(save_path, filename)):
            params = urlencode(
                {&#039;check&#039;: 1, &#039;verify&#039;: verify, &#039;nowtime&#039;: int(time.time() * 1000)})
            url = &#039;%s?%s&#039; % (e.attr[&#039;href&#039;], params)

            print(&#039;  fetch: &#039; + url)
            downdoc = pyquery(url, headers=headers)
            # 第0个是电信下载点，第1个是移动下载点
            downurl = base_url + downdoc(&#039;a[href^=;remotedown.php;]&#039;).eq(1).attr(&#039;href&#039;)
            addtoidm(downurl, save_path, filename)
            time.sleep(1.5)

    wefiler_urls = checkwefiler(d)
    if wefiler_urls:
        print(wefiler_urls)
        
    

                        

    
        
            пример #23
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        crawl_categorytree.py
                    
                                
                                            проект:
                                        chenweiqiang2016/cwq-crawler
                
            
        
    
    
        
            def crawl_vvic_category_tree(wb):
    h = httplib2.http()
    response, content = h.request(;http://www.vvic.com/;)
    #     fw = open(;c:users/chenweiqiang/desktop/vvic2.html;, ;w;)
    #     fw.write(content)
    #     fw.close()
    ws = wb.add_sheet(;vvic品类树;)
    ws.write(0, 0, ;一级品类;)
    ws.write(0, 1, ;二级品类;)
    ws.write(0, 2, ;三级品类;)
    row = 0
    doc = pyquery(content)
    level1nodelist = doc(;div.dd-inner &gt; div.item;)
    anotherlevel1nodelist = [
        doc(;div.sub-items;)[0],
        doc(;div.sub-items;)[1],
        doc(;div.sub-items;)[2],
        doc(;div.sub-items;)[5],
    ]
    for index, level1node in enumerate(level1nodelist):
        level1_category = pyquery(level1node)(;h3 &gt; a;).text()
        level2nodelist = pyquery(anotherlevel1nodelist[index]).children(;dl;)
        for level2node in level2nodelist:
            level2nodeq = pyquery(level2node)
            level2_category = level2nodeq.children(;dt &gt; a;).text()
            level3nodelist = level2nodeq.children(;dd &gt; a;)
            for level3node in level3nodelist:
                level3_category = pyquery(level3node).text()
                row += 1
                ws.write(row, 0, level1_category)
                ws.write(row, 1, level2_category)
                ws.write(row, 2, level3_category)
        
    

                        

    
        
            пример #24
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        css_reflector.py
                    
                                
                                            проект:
                                        christabor/codereflector
                
            
        
    
    
        
             def _add_nested(self, k, el):
     ;;;parse nested element by its children.;;;
     el = pq(el)
     tagname = pq(el)[0].tag
     if tagname in self.invalid_tags:
         return
     id = self._format_id(el.attr(;id;))
     classes = self._format_classes(el.attr(;class;))
     selector = self._format_selector(el, id, classes)
     children = pq(el).children()
     if not self._is_root_body_node(el):
         return
     # add for single nodes only
     if not children:
         self.selectors.add(selector)
     # build nested css by traversing all child nodes and getting
     # their attributes.
     while children:
         for child in children:
             # 1. add current
             self.selectors.add(selector)
             # 2. add child
             child = pq(child)
             selector += self._add_id_and_classes(child)
             self.selectors.add(selector)
             # # 3. move to next children
             children = child.children()
        
    

                        

    
        
            пример #25
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        hw_ifeng_bk.py
                    
                                
                                            проект:
                                        hw20686832/icrawler
                
            
        
    
    
        
                def extract(self):
        self.html = re.sub(;&lt;!--.*?--&gt;;, ;;, self.html)
        doc = pyquery(self.html)
        content_node = doc(;div#blog_article_content;)

        content = content_node.outerhtml()
        cpl = re.compile(&#039;&lt;img.*?src=;.*?;&#039;, re.i)
        content = re.sub(;%;, ;%%;, content)
        content_doc = pyquery(content)
        content_doc(;img;).attr(;src;, ;%s;)

        item = contentitem()
        item[;title;] = self.title = doc(;div.blog_main_left_content;).find(;h3;).text()
        item[;author;] = self.author = doc(;div#common_person_blogtitle;)(;div#title01;)(;a;).text()

        item[;content;] = self.content = content_doc.outerhtml()

        self.release_time = doc(;div.blog_main_time;).find(;p;).text().strip()
        item[;release_time;] = self.release_time

        item[;source;] = u;凤凰网;
        item[;pic_url;] = ;;

        item[;image_urls;] = [img.get(;src;) for img in content_node(;img;)]

        return item
        
    

                        

    
        
            пример #26
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        weibo_weixin.py
                    
                                
                                            проект:
                                        jttoday/spider
                
            
        
    
    
        
             def list_page(self, response):
     result_content = {}
 
     content_iter = re.finditer(r;stk &amp;&amp; stk.pageletm &amp;&amp; stk.pageletm.view\((?p&lt;content&gt;\{.*?\})\);, response.content)
     for iter in content_iter:
         ok, content = safe_loads(iter.groupdict()[&#039;content&#039;])
         if ok and ;pl_weibo_direct; == content.get(;pid;):
             result_content = content
             break
     else:
         return {}
     
     pyquery_doc = pyquery(result_content[;html;])
     pyquery_doc.make_links_absolute(response.url)
     
     items = []
     for item in pyquery_doc(;div.feed_lists&gt;div.wb_cardwrap&gt;div;).items():
         weibo_href = item(;div.content&gt;div.feed_from&gt;a;).attr.href
         if weibo_href:
             weibo_pics = []
             for pic in item(;div.feed_content div.media_box img;).items():
                 weibo_pics.append(pic.attr.src)
                 
             data = {
                 ;content;: item(;div.feed_content p.comment_txt;).text(),
                 ;nickname;: item(;div.feed_content a.w_texta;).attr.title,
                 ;href;: weibo_href,
                 ;quote_nickname;: item(;div.feed_content div.comment div.comment_info a.w_texta;).attr.title,
                 ;quote_content;: item(;div.feed_content div.comment div.comment_info p.comment_txt;).text(),
                 ;pics;: &#039;&#039;.join(weibo_pics)
             }
             self.crawl(;data:,%s; % weibo_href, callback = self.detail_page, data_fetch_content=data)
        
    

                        

    
        
            пример #27
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        html_to_mm.py
                    
                                
                                            проект:
                                        appanp/ceqna
                
            
        
    
    
        
            def prn_tbl_sec(index, node):
    global node_id, curr_dep, last_dep, depth, optyp
    if index != 0:
        print &gt;&gt; sys.stderr, ;...start of part, depth=; + str(depth)
        ce = pyquery(node)
        # print the part heading as containing node
        partlst = ce.prevall(;h3;)
        parttxt = pyquery(partlst[len(partlst) - 1]).text()
        if index % 2 == 0:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;left; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
        else:
            print &#039;&lt;node created=;1347382439772; id=;partid_&#039; + str(
                index
            ) + &#039;; position=;right; modified=;1347382510988; text=;&#039; + parttxt.encode(;utf-8;) + &#039;;&gt;&#039;
    rows = ce(;tr;)
    rows.each(prn_mm_for_sec)
    # print the closing tags for this table
    print &gt;&gt; sys.stderr, ;...end of part, depth=; + str(depth)
    for i in range(0, depth):
        print ;&lt;/node&gt;;
    print ;&lt;/node&gt;;  # for the part heading containing node
    depth = 0
    last_dep = 3
        
    

                        

    
        
            пример #28
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        testuserpasschange.py
                    
                                
                                            проект:
                                        juannorris/eff
                
            
        
    
    
        
             def test_password_reset_not_an_email_error(self):
     response = self.test_client.post(reverse(;password_reset;), {;email;: ;notanemail;})
     query = pyquery(response.content)
     query = query(;ul.errorlist;)
     error = query.text()
     error_msg = ;enter a valid e-mail address.;
     self.assertequal(error, error_msg)
        
    

                        

    
        
            пример #29
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        scraper.py
                    
                                
                                            проект:
                                        ebigalee/graeae
                
            
        
    
    
        
                def scrape_homepage(self, **kwargs):
        ;;;
        scrape!
        ;;;
        logger.info(;scraping homepage (start time: %s); % self.run_time)

        if not kwargs:
            response = requests.get(self.url)

            page = pyquery(response.content)
        else:
            page = pyquery(**kwargs)

        article_elements = page(;.stories-wrap article;)
        slot = 0
        articles = []

        for el in article_elements:
            element = pyquery(el)

            article = article(element, self.run_time)

            if not article.story_id and not article.is_apps_project:
                continue

            if not element.hasclass(;attachment;):
                slot += 1

            article.slot = slot
            articles.append(article)
            logger.info(;scraped %s from homepage (%s); % (article.story_id, article.headline))

        return articles
        
    

                        

    
        
            пример #30
                        
                0
                
                
            
        
        
            
                
                показать файл
            
            
                                    
                        файл:
                        parser.py
                    
                                
                                            проект:
                                        t10thekinofstars/crawlerforfun
                
            
        
    
    
        
            def getrestb():
    html = fileworker.gethtml()
    pq = pyquery(html)
    result = dict()
    blocks = list()
    for i in pq.items(;.row.result;):
        list.append(i)
        
    



                            
                    
    
            
                                    
                                    
            
            
            
            
        
                                    
                    
    



    
        
            
                                    популярные функции |
                                
                                            популярные классы                                    
                            
        
        
            
                                     php
                                    | c# (csharp)
                                    | java
                                    | golang
                                    | c++ (cpp)
                                    | python
                                    | javascript
                                            
        
        
            
                                                                                                                     en
                                                                                | ru
                                                                                | de
                                                                        
        
        
            
                            
                            
                    
                    
                
                    
    






----------------------------------------
https://technoatom.mail.ru/curriculum/program/lesson/13156/
----------------------------------------




	
	
    
    
    
    
	техноатом mail.ru
    
    
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
	
	
	
    
	
    
    
    
	
	
	
    
    
    
    
    
    
    
    
    


    
    
        
        
        
    

    
    
    
        
            
                
                    
                    
                        войти
                        
                    
                        
                        
                        
                            
                                
                            
                            
                                
                            
                            
                                
                                    запомнить меня
                                    
                                
                                    восстановление пароля
                                    регистрация
                                
                            
                            
                                    
                            
                        
                    
                    
                        
                            
                            восстановление пароля
                        
                        
                        
                        
                            
                                
                        
                        
                            
                        
                    
                
            
        
    
    
        
            
                
                        регистрация
                        
                    
                
                    
                        для регистрации на открытые наборы необходимо зарегистрироваться на портале
                    
                    
                         войти через
                            
                                
                                it.mail.ru
                            
                        
                        регистрация
                    
                
            
        
    
    


    
        
            
                
                    обратная связь
                    
                
                
                
            
        
    

	
	
		
			
				
					
						
					
					
					
						
							
								
                                    
                                    
                                    
                                        
                                            faq
                                        
                                    
                                    
                                    
                                        
                                            выпуски
                                        
                                    
                                    
                                    
                                        
                                            контакты
                                        
                                    
                                    
                                    
                                        
                                            экскурсии
                                        
                                    
                                    
                                        
                                            
                                                    
                                            
                                        
                                        
                                            
                                                
                                                войти
                                            
                                        
                                    
                                
							
							
                                
                                    
                                        
                                            на главную
                                        
                                    
                                    
                                    
                                        
                                            о проекте
                                        
                                    
                                    
                                    
                                        
                                            программа
                                        
                                    
                                    
                                    
                                        
                                            расписание
                                        
                                    
                                    
                                    
                                        
                                            новости
                                        
                                    
                                
							
						
					
				
			
            
    
        
            cовместный образовательный проект mail.ru group и нияу мифи
            
            реализует практико-ориентированное бесплатное
                дополнительное
                обучение студентов старших курсов и аспирантов мифи силами сотрудников mail.ru group
            
        
    
    
        
        
        
            
            
        
    
		
    
    
        
            
            
                
                    
                        
                            сообщить вам об открытии следующего набора на наши курсы?
                        
                    
                    
                        
                            сообщить!
                        
                    
                
            
        
        
            
                
                    
                        
                            цель
                        
                        
                            процесс
                        
                        
                            итог
                        
                    
                    
                        
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                сертификат mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                практические навыки и реальный опыт решения сложных задач
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                больше возможностей успешного трудоустройства
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                    
                                    
                                        обучаться на открытом курсе может любой студент
                                            или
                                            аспирант мифи, независимо от того, на каком факультете он учится
                                        
                                        
                                            
                                                обучение состоит из теоретических блоков и практической работы над
                                                    реальными проектами и кейсами;
                                                
                                                обучение бесплатное для всех студентов;
                                                занятия по одному курсу проходят раз - два в неделю в вечернее
                                                    время;
                                                
                                                также, обучаясь на открытых курсах, вы имеете возможность раньше
                                                    всех
                                                    узнавать о предстоящих событиях в сфере it, посещать мероприятия и
                                                    экскурсии организованные проектом, попасть на стажировку в mail.ru
                                                
                                            
                                        
                                    
                                
                            
                            
                                
                                    
                                        
                                            
                                                
                                            
                                            
                                                пройти стажировку в mail.ru group
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить солидный опыт для будущего резюме
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                стать частью проекта и реально влиять на его развитие
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить дополнительную специальность и попробовать себя в современной
                                                веб-разработке
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                постоянное общение с преподавателиями – известными и признанными
                                                экспертами
                                            
                                        
                                    
                                    
                                        
                                            
                                                
                                            
                                            
                                                получить практический опыт разработки и проектирования, поработать над
                                                реальными проектами
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            напомнить о начале набора
                        
                        
                            в настоящий момент времени набор закрыт.
                            
                                укажите свое имя и адрес электронной почты, и мы напишем вам, когда начнется набор.
                            
                        
                        
                    
                    
                        
                            
                            
                                
                            
                            
                                
                            
                            предупредить
                            
                        
                    
                
            
        
        
            
                
                    
                        
                            спасибо
                        
                        
                    
                    
                        
                            ваша заявка успешно отправлена!
                            мы обязательно напомним вам о начале
                            набора. 
                            желаем удачи!
                        
                        
                            закрыть
                            
                        
                    
                
            
        
    
    
	
        
   
        
            
                
            
            
                дмитрий гришин
                председатель совета директоров mail.ru group
                такие проекты как техноатом важны и для рынка в целом, и в первую
                    очередь — для самих студентов. у молодых специалистов должна быть возможность общаться
                    с экспертами отрасли, пробовать свои силы в реальных проектах, иметь перед глазами вдохновляющие
                    примеры.
                
            
        
    
		
			
				
					техноатом
					© mail.ru group, 2011–2020
				
				
					разработка: лаборатория технопарка
					обратная связь
				
			
			
				группа вконтакте 
				обратная связь
			
		
	


----------------------------------------
https://stackoverflow.com/questions/9662346/python-code-to-remove-html-tags-from-a-string
----------------------------------------



    

    

        python code to remove html tags from a string - stack overflow
        
        
         
        
        
        
        
        
        
        
        
        
        
        

        
        
    
        
        

    
            
            
            
            
            
            
            
            
            
            
        

        
        
        
        
        
        
        


    
    
    
    
    
    
        

    
        
                
                
                    
                
                    
                        stack overflow
                    



        

            
                
                    
                        products
                    
                

                    
                        customers
                    
                    
                        use cases
                    
            
            
                
                
                    
                        
                            stack overflow
                            public questions and answers
                        
                    
                    
                        
                            teams
                            private questions and answers for your team
                        
                    
                    
                        
                            enterprise
                            private self-hosted questions and answers for your enterprise
                        
                    
                        
                            
                                jobs
                                programming and related technical career opportunities
                            
                        
                    
                        
                            talent
                            hire technical talent
                        
                    
                    
                        
                            advertising
                            reach developers worldwide
                        
                    

                
            

            
                    
                        s-popover#show"
                               data-s-popover-placement="bottom-start"/>
                        
                        
    
        
            loading&#x2026;
        
    

    
    

    

                    
            
        
        


        

            
                            log in
                            sign up

            

    
            

    
        
            
                current community
            
        
        
            
                    
                            
                
        
        
            stack overflow
        
    

    
    
            help
            chat
    

                    
                    
                            
        
    

                            
        
        
            meta stack overflow
        
    

                    
            
        

        
            
your communities            

        
        

                
sign up or log in to customize your list.                
        

        
            more stack exchange communities
            
            company blog
        
        
                
                
    

    

    

     
        
            
                
                    by using our site, you acknowledge that you have read and understand our cookie policy, privacy policy, and our terms of service.
                
            
            
                
                    
                
            
        
    

    





    
            


    
        
            
        
            
home            
        
                
                    
                            public
                                
            
                    stack overflow
            
        

        
            
tags            
        
        
            
users            
        
        
            
jobs            
        
                    
                
                    
                        
                                
                                    teams
                                    
                                        
                                            what&#x2019;s this?
                                        

                                    
                                
                                
                                    
                                        
                                            
                                                
                                                    
                                                
                                                
                                            
                                            
free 30 day trial                                            
                                        
                                    
                                
                        
                    
            
        
    


        
            

            
                teams
                q&amp;a for work
                

                            stack overflow for teams is a private, secure spot for you and
                            your coworkers to find and share information.
                                        
                
learn more                
            

            
                
            
        





        

            

    

    

        

            
                        python code to remove html tags from a string [duplicate]

                
                    
    
        ask question
    

                
            
            
                    
                        asked
                        8 years, 2 months ago
                    
                        
                            active
                            7 months ago
                        
                    
                        viewed
                        207k times
                    
            
            

                


    


    
        
            
        
        125
        

        
            
            27
        
    

    
        



        

        


    
    
                        
            
        
            
                
                    
                        this question already has answers here:
                        
                    
                
            
                    
                        strip html from strings in python
                            
                                (26 answers)
                            
                    
                closed 5 years ago.
        

    

i have a text like this:
text = """&lt;div&gt;
&lt;h1&gt;title&lt;/h1&gt;
&lt;p&gt;a long text........ &lt;/p&gt;
&lt;a href=""&gt; a link &lt;/a&gt;
&lt;/div&gt;"""

using pure python, with no external module i want to have this:
&gt;&gt;&gt; print remove_tags(text)
title a long text..... a link

i know i can do it using lxml.html.fromstring(text).text_content() but i need to achieve the same in pure python using builtin or std library for 2.6+
how can i do that?
    

        
            
                python html xml string parsing 
            
        

    
        
            
                

share|improve this question|
        follow
    ||||

            

                

    
        edited jun 6 '13 at 14:38
    
    
        
    
    
        obmarg
        
            8,6233232 silver badges5555 bronze badges
        
    
                
            
                
    
        asked mar 12 '12 at 5:55
    
    
        
    
    
        bruno rocha - rochacbrunobruno rocha - rochacbruno
        
            5,78844 gold badges2020 silver badges2929 bronze badges
        
    


            
        
    
    



                
        
            

                        
        
            
                    2
            
        
        
            
                
                any specific reason why you don&#39;t want to use an external module.?
                
&ndash;;ranrag
                mar 12 '12 at 6:08
                        
                            
                        
            
        
    
    
        
            
                    1
            
        
        
            
                
                no permissions to install modules on the server...
                
&ndash;;bruno rocha - rochacbruno
                mar 13 '12 at 4:32
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    





                

                    
                    
                        
                            
                                
                                        5 answers
                                    5
                                
                            
                            
                                
        
            active
        
            oldest
        
            votes


                            
                        
                            
                    


                                          


    
        
            
        
        234
        

    
            
                
            

    
        



        

        


    
    
using a regex
using a regex, you can clean everything inside &lt;&gt; :
import re
def cleanhtml(raw_html):
  cleanr = re.compile('&lt;.*?&gt;')
  cleantext = re.sub(cleanr, '', raw_html)
  return cleantext

some html texts can also contain entities, that are not enclosed in brackets such as '&amp;nsbm'. if that is the case then you might want to write the regex as
cleanr = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')

this link contains more details on this.
using beautifulsoup
you could also use beautifulsoup additional package to find out all the raw text
you will need to explicitly set a parser when calling beautifulsoup 
i recommend "lxml" as mentioned in alternative answers (much more robust than the default one (i.e. available without additional install) 'html.parser' 
from bs4 import beautifulsoup
cleantext = beautifulsoup(raw_html, "lxml").text

but it doesn't prevent you from using external libraries, so i recommend the first solution.
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jul 23 '19 at 16:39
    
    
        
    
    
        smkj33
        
            9911 silver badge1212 bronze badges
        
    
    


    
        
    
        answered oct 19 '12 at 21:26
    
    
        
    
    
        c24bc24b
        
            3,07455 gold badges2020 silver badges2424 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                if you want to compile regexp, best way is compile outside function. in you exemple every call cleanhtml must be compile regexp again
                
&ndash;;freylis
                jun 20 '14 at 2:35
            
        
    
    
        
            
                    3
            
        
        
            
                
                beautifulsoup is good when the markup is heavy, else try to avoid it as it&#39;s very slow.
                
&ndash;;ethan
                jun 12 '15 at 12:48
            
        
    
    
        
            
            
        
        
            
                
                great answer. you forgot the colon at the end of def cleanhtml(raw_html) though :)
                
&ndash;;bjesus
                sep 26 '16 at 18:29
            
        
    
    
        
            
            
        
        
            
                
                fwiw, this will also remove xml another xhtml tags, too.
                
&ndash;;blacksite
                jun 1 '17 at 19:11
            
        
    
    
        
            
                    2
            
        
        
            
                
                nice answer. you might want to explicitly set your parser in beautifulsoup, using cleantext = beautifulsoup(raw_html, ;html.parser;).text
                
&ndash;;zemogle
                dec 6 '17 at 16:32
            
        
    

            
	    

        
                    
                ;|;
            show 8 more comments
                 
    
    



                                          


    
        
            
        
        39
        

    
            
                
            

    
        



        

        


    
    
python has several xml modules built in. the simplest one for the case that you already have a string with the full html is xml.etree, which works (somewhat) similarly to the lxml example you mention:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited jun 18 '15 at 17:02
    
    
        
    
    
        adamjlev
        
            12.5k1111 gold badges5454 silver badges5858 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 6:04
    
    
        
    
    
        lvclvc
        
            28.5k55 gold badges5656 silver badges9393 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
            
        
        
            
                
                this worked great for me, thanks!
                
&ndash;;uralan
                aug 30 '19 at 12:58
            
        
    
    
        
            
                    1
            
        
        
            
                
                this worked for me but be carefull of the html tags from autoclose type. example : &lt;/br&gt;  i got a ;parseerror: mismatched tag: line 1, column 9; cause this tag is close without being open before. this is the same for all html tags autoclosed.
                
&ndash;;1ronmat
                mar 11 at 13:17
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        31
        

    
            
                
            

    
        



        

        


    
    
note that this isn't perfect, since if you had something like, say, &lt;a title="&gt;"&gt; it would break. however, it's about the closest you'd get in non-library python without a really complex function:
import re
tag_re = re.compile(r'&lt;[^&gt;]+&gt;')
def remove_tags(text):
    return tag_re.sub('', text)

however, as lvc mentions xml.etree is available in the python standard library, so you could probably just adapt it to serve like your existing lxml version:
def remove_tags(text):
    return ''.join(xml.etree.elementtree.fromstring(text).itertext())

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 16 '17 at 15:59
    
    
        
    
    
        blender
        
            238k4040 gold badges369369 silver badges435435 bronze badges
        
    
    


    
        
    
        answered mar 12 '12 at 5:57
    
    
        
    
    
        amberamber
        
            406k6666 gold badges569569 silver badges514514 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    1
            
        
        
            
                
                i like your regex approach, maybe it will be better if performance&#39;s an important factor.
                
&ndash;;douglas camata
                mar 12 '12 at 6:27
            
        
    
    
        
            
            
        
        
            
                
                and in addition, it works with strings not starting with an xml tag, it that would be the case
                
&ndash;;kiril
                aug 6 '14 at 16:41
            
        
    
    
        
            
            
        
        
            
                
                @douglascamata regex is not more performant than an xml parser.
                
&ndash;;slater victoroff
                feb 19 '15 at 5:43
            
        
    
    
        
            
                    2
            
        
        
            
                
                it&#39;s worth noting that this will break if you have a text &lt; in your document.
                
&ndash;;slater victoroff
                feb 26 '15 at 14:39
            
        
    
    
        
            
                    1
            
        
        
            
                
                @patrickt you need to export it - import xml.etree
                
&ndash;;amber
                2 days ago
            
        
    

            
	    

        
                    
                ;|;
            show 4 more comments
                 
    
    


                                          


    
        
            
        
        5
        

    
            
                
            

    
        



        

        


    
    
there's a simple way to this in any c-like language. the style is not pythonic but works with pure python:
def remove_html_markup(s):
    tag = false
    quote = false
    out = ""
    for c in s:
            if c == '&lt;' and not quote:
                tag = true
            elif c == '&gt;' and not quote:
                tag = false
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
    return out

the idea based in a simple finite-state machine and is detailed explained here: http://youtu.be/2tu9ltdujbw
you can see it working here: http://youtu.be/hpknpcyed9m?t=35s
ps - if you're interested in the class(about smart debugging with python) i give you a link: https://www.udacity.com/course/software-debugging--cs259. it's free! 
    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited oct 10 '19 at 20:43
    
    
        
    
    
        
        
            
        
    
    


    
        
    
        answered jan 22 '13 at 17:27
    
    
        
    
    
        medeirosmedeiros
        
            3,43722 gold badges2121 silver badges3131 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    6
            
        
        
            
                
                this will break on mismatched quotes, and is quite slow due to adding to the output character by character. but it ilustrates enough, that writing a primitive character-by-character parser isn&#39;t a big deal.
                
&ndash;;tomasz gandor
                feb 28 '14 at 11:28
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    


                                          


    
        
            
        
        -6
        

    
            
                
            

    
        



        

        


    
    
global temp
temp =''
s = ' '
def remove_strings(text):
    global temp 
    if text == '':
        return temp
    start = text.find('&lt;')
    end = text.find('&gt;')
    if start == -1 and end == -1 :
        temp = temp + text
    return temp
newstring = text[end+1:]
fresh_start = newstring.find('&lt;')
if newstring[:fresh_start] != '':
    temp += s+newstring[:fresh_start]
remove_strings(newstring[fresh_start:])
return temp

    
    
        
        
            

share|improve this answer|
        follow
    ||||

        
    

    
        edited aug 14 '14 at 13:29
    
    
        
    
    
        drachenfels
        
            2,03211 gold badge1919 silver badges3030 bronze badges
        
    
    


    
        
    
        answered feb 25 '13 at 9:39
    
    
        
    
    
        user1899895user1899895
        
            6511 silver badge55 bronze badges
        
    


    
    
    



                
        
            

                        
        
            
                    11
            
        
        
            
                
                your answer is: a) awfully formated (violates pep8 for example), b) overkill because there are tools to do the same, c) prone to fail (what happens when html has &gt; character in one of the attributes?), d) global in xxi century in such trivial case?
                
&ndash;;drachenfels
                aug 14 '14 at 13:27
                        
                            
                        
            
        
    

            
	    

        
                    add a comment
                ;|;
            
                 
    
    






                            
not the answer you&#x27;re looking for? browse other questions tagged python html xml string parsing  or ask your own question.                            
                
            
            
                

                
                    the overflow blog
                
            
    
        
                
                
        
        
            podcast 233: contact tracing and civil liberties, part 2
        
    
            
            
    
        
                
                
        
        
            dev around the sun: community and caring in lonely times
        
    
            
                
                    featured on meta
                
            
    
        
                
                
        
        
            introducing the moderator council - and its first, pro-tempore, representatives
        
    
            
            
    
        
                
                
        
        
            ceo blog: the way forward
        
    
            
            
    
        
                
                
        
        
            question close updates: phase 1
        
    
            
            
    
        
                
                
        
        
            it&#39;s time to reward the duplicate finders
        
    
            






                
                
	linked
	
		    

	
		265
	
	strip html from strings in python

		    

	
		3
	
	remove html entities and extract text content using regex

		    

	
		0
	
	strip the html tags and return only text using mechanize in python

		    

	
		0
	
	how to strip tags from html with robobrowser

		    

	
		1
	
	web page without html tables into dataframe python

		    

	
		0
	
	regex is not removing websites from text data in preprocessing

		    

	
		1
	
	extracting text from a succession of strings enclosed in html tags and strings without tags

		    

	
		1
	
	python: issue with &#39;unexpected end of pattern&#39;

		    

	
		0
	
	remove encoded html tags from large string in python

	



                    
                        related
                        
                            4836calling an external command from python2125how do i get a substring of a string in python?1337reverse a string in python3599does python have a string &#39;contains&#39; substring method?1567redirect from an html page2040how do i lowercase a string in python?1281pythonic way to create a long multi-line string1733how to remove a key from a python dictionary?1766why does this code using random strings print &ldquo;hello world&rdquo;?86cannot display html string
                        
                    

                
    
        
            hot network questions
        
    
    
            
                
                    can i type this with my left hand?
                

            
            
                
                    what is the benefit of a pasta pot with an inset?
                

            
            
                
                    how can i secure a solo-authored paper as a phd student, while working with a supervisor who has reputation of forcing coauthorship?
                

            
            
                
                    why does stockfish undervalue pawns when compared to the classical ;a piece is worth three pawns; approach?
                

            
            
                
                    short squeeze basic questions
                

            
            
                
                    in the two-person killing the hydra game, what is the winning strategy?
                

            
            
                
                    how rigorous should high school calculus be?
                

            
            
                
                    what is the correct (most common) translation for &#x27;damas&#x27;?
                

            
            
                
                    what is the attack scenario against which encrypted files provide protection?
                

            
            
                
                    is troll mitosis possible?
                

            
            
                
                    repackaging shelf-stable products
                

            
            
                
                    spread across a line (minus indent)
                

            
            
                
                    root of root of root of root
                

            
            
                
                    how can twinaxial cables be faster than cat cables
                

            
            
                
                    conversion into hexadecimal using c&#x2b;&#x2b;
                

            
            
                
                    does the mage hand cantrip pass through solid surfaces?
                

            
            
                
                    how to efficiently get the mean of the elements in two list of lists in python
                

            
            
                
                    parse ascii art math!
                

            
            
                
                    for custom multirotors, what is the most useful method of collecting flight data?
                

            
            
                
                    anyone know what programming language this is?
                

            
            
                
                    can an perron eigenvector of a non-symmetric irreducible nonnegative matrix be also a perron eigenvector of its transpose?
                

            
            
                
                    is there an adjective meaning ;asking for too much in an arrogant way;?
                

            
            
                
                    analogy between stiefel-whitney and chern classes
                

            
            
                
                    is elon musk&#x27;s child name valid in california?
                

            
    

        
            more hot questions
        


            
    

default


        
    
        
    

            
        
                
                    
                    
                
            
                    
                        stack overflow
                        
                            questions
                                jobs
                                developer jobs directory
                                     salary calculator
                                help
                                mobile
                        
                    
                    
                        products
                        
                            teams
                            talent
                            advertising
                            enterprise
                        
                    
                
                    company
                    
                            about
                        press
                            work here
                        legal
                        privacy policy
                            contact us
                    
                
                
                    
                    
                        stack exchange network
                        
                            technology
                            life / arts
                            culture / recreation
                            science
                            other
                        
                    
                
                
                        
        
                stack overflow
                server fault
                super user
                web applications
                ask ubuntu
                webmasters
                game development
                    
                tex - latex
                software engineering
                unix &amp; linux
                ask different (apple)
                wordpress development
                geographic information systems
                electrical engineering
                    
                android enthusiasts
                information security
                database administrators
                drupal answers
                sharepoint
                user experience
                mathematica
                    
                salesforce
                expressionengine&#xae; answers
                stack overflow em portugu&#xea;s
                blender
                network engineering
                cryptography
                code review
                    
                magento
                software recommendations
                signal processing
                emacs
                raspberry pi
                stack overflow &#x43d;&#x430; &#x440;&#x443;&#x441;&#x441;&#x43a;&#x43e;&#x43c;
                code golf
                    
                stack overflow en espa&#xf1;ol
                ethereum
                data science
                arduino
                bitcoin
                software quality assurance &amp; testing
                sound design
                    
                windows phone
                
                    
                        
                            more (28)
                        
                    
                
        
    
    
        
                photography
                science fiction &amp; fantasy
                graphic design
                movies &amp; tv
                music: practice &amp; theory
                worldbuilding
                video production
                    
                seasoned advice (cooking)
                home improvement
                personal finance &amp; money
                academia
                law
                physical fitness
                gardening &amp; landscaping
                    
                parenting
                
                    
                        
                            more (11)
                        
                    
                
        
    
    
        
                english language &amp; usage
                skeptics
                mi yodeya (judaism)
                travel
                christianity
                english language learners
                japanese language
                    
                chinese language
                french language
                german language
                biblical hermeneutics
                history
                spanish language
                islam
                    
                &#x420;&#x443;&#x441;&#x441;&#x43a;&#x438;&#x439; &#x44f;&#x437;&#x44b;&#x43a;
                russian language
                arqade (gaming)
                bicycles
                role-playing games
                anime &amp; manga
                puzzling
                    
                motor vehicle maintenance &amp; repair
                board &amp; card games
                bricks
                homebrewing
                martial arts
                the great outdoors
                poker
                    
                chess
                sports
                
                    
                        
                            more (16)
                        
                    
                
        
    
    
        
                mathoverflow
                mathematics
                cross validated (stats)
                theoretical computer science
                physics
                chemistry
                biology
                    
                computer science
                philosophy
                linguistics
                psychology &amp; neuroscience
                computational science
                
                    
                        
                            more (8)
                        
                    
                
        
    
    
        
                meta stack exchange
                stack apps
                api
                data
        
    

                
            
            
                
                    blog
                    facebook
                    twitter
                    linkedin
                    instagram
                

                
site design / logo &#169; 2020 stack exchange inc; user contributions licensed under cc by-sa 4.0
                                with attribution required.                    rev;2020.5.11.36794
                
            
        

    

            
    
        stack overflow works best with javascript enabled
            
        
    

        

    
    
    
----------------------------------------
